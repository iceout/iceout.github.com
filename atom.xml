<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[iceout's blog]]></title>
  <link href="http://iceout.github.com/atom.xml" rel="self"/>
  <link href="http://iceout.github.com/"/>
  <updated>2012-08-01T17:31:44+08:00</updated>
  <id>http://iceout.github.com/</id>
  <author>
    <name><![CDATA[iceout]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[使用python压缩文件夹]]></title>
    <link href="http://iceout.github.com/blog/2012/08/01/shi-yong-pythonya-suo-wen-jian-jia/"/>
    <updated>2012-08-01T17:23:00+08:00</updated>
    <id>http://iceout.github.com/blog/2012/08/01/shi-yong-pythonya-suo-wen-jian-jia</id>
    <content type="html"><![CDATA[<p>今天在stackoverflow回答了一个用python压缩文件时处理空文件夹的问题，直接粘贴了一段以前找的代码作为答案，竟然获得了一个铜牌，实在是有点羞愧。</p>

<p>不过那段代码压缩文件时是用的绝对路径,不太方便，为了安慰一下自己的心灵，现在改为相对路径，代码如下：</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span /></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
</pre></td><td class="code"><pre><code class="python"><span class="line"><span class="kn">import</span> <span class="nn">os</span><span class="o">,</span> <span class="nn">zipfile</span>
</span><span class="line"><span class="kn">from</span> <span class="nn">os.path</span> <span class="kn">import</span> <span class="n">join</span>
</span><span class="line"><span class="k">def</span> <span class="nf">zipfolder</span><span class="p">(</span><span class="n">foldername</span><span class="p">,</span> <span class="n">filename</span><span class="p">,</span> <span class="n">includeEmptyDIr</span><span class="o">=</span><span class="bp">True</span><span class="p">):</span>
</span><span class="line">    <span class="n">empty_dirs</span> <span class="o">=</span> <span class="p">[]</span>
</span><span class="line">    <span class="nb">zip</span> <span class="o">=</span> <span class="n">zipfile</span><span class="o">.</span><span class="n">ZipFile</span><span class="p">(</span><span class="n">filename</span><span class="p">,</span> <span class="s">&#39;w&#39;</span><span class="p">,</span> <span class="n">zipfile</span><span class="o">.</span><span class="n">ZIP_DEFLATED</span><span class="p">)</span>
</span><span class="line">    <span class="k">for</span> <span class="n">root</span><span class="p">,</span> <span class="n">dirs</span><span class="p">,</span> <span class="n">files</span> <span class="ow">in</span> <span class="n">os</span><span class="o">.</span><span class="n">walk</span><span class="p">(</span><span class="n">foldername</span><span class="p">):</span>
</span><span class="line">        <span class="n">rel_path</span> <span class="o">=</span> <span class="n">os</span><span class="o">.</span><span class="n">path</span><span class="o">.</span><span class="n">relpath</span><span class="p">(</span><span class="n">root</span><span class="p">,</span> <span class="n">os</span><span class="o">.</span><span class="n">path</span><span class="o">.</span><span class="n">dirname</span><span class="p">(</span><span class="n">foldername</span><span class="p">))</span>
</span><span class="line">        <span class="n">empty_dirs</span><span class="o">.</span><span class="n">extend</span><span class="p">([</span><span class="nb">dir</span> <span class="k">for</span> <span class="nb">dir</span> <span class="ow">in</span> <span class="n">dirs</span> <span class="k">if</span> <span class="n">os</span><span class="o">.</span><span class="n">listdir</span><span class="p">(</span><span class="n">join</span><span class="p">(</span><span class="n">root</span><span class="p">,</span> <span class="nb">dir</span><span class="p">))</span> <span class="o">==</span> <span class="p">[]])</span>
</span><span class="line">        <span class="k">for</span> <span class="n">name</span> <span class="ow">in</span> <span class="n">files</span><span class="p">:</span>
</span><span class="line">            <span class="nb">zip</span><span class="o">.</span><span class="n">write</span><span class="p">(</span><span class="n">join</span><span class="p">(</span><span class="n">root</span><span class="p">,</span> <span class="n">name</span><span class="p">),</span> <span class="n">join</span><span class="p">(</span><span class="n">rel_path</span><span class="p">,</span><span class="n">name</span><span class="p">))</span>
</span><span class="line">        <span class="k">if</span> <span class="n">includeEmptyDIr</span><span class="p">:</span>
</span><span class="line">            <span class="k">for</span> <span class="nb">dir</span> <span class="ow">in</span> <span class="n">empty_dirs</span><span class="p">:</span>
</span><span class="line">                <span class="n">zif</span> <span class="o">=</span> <span class="n">zipfile</span><span class="o">.</span><span class="n">ZipInfo</span><span class="p">(</span><span class="n">join</span><span class="p">(</span><span class="n">rel_path</span><span class="p">,</span><span class="nb">dir</span><span class="p">)</span> <span class="o">+</span> <span class="s">&quot;/&quot;</span><span class="p">)</span>
</span><span class="line">                <span class="nb">zip</span><span class="o">.</span><span class="n">writestr</span><span class="p">(</span><span class="n">zif</span><span class="p">,</span> <span class="s">&quot;&quot;</span><span class="p">)</span>
</span><span class="line">        <span class="n">empty_dirs</span> <span class="o">=</span> <span class="p">[]</span>
</span><span class="line">    <span class="nb">zip</span><span class="o">.</span><span class="n">close</span><span class="p">()</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Chapter 12 二叉查找树]]></title>
    <link href="http://iceout.github.com/blog/2012/07/13/chapter-12-er-cha-cha-zhao-shu/"/>
    <updated>2012-07-13T14:41:00+08:00</updated>
    <id>http://iceout.github.com/blog/2012/07/13/chapter-12-er-cha-cha-zhao-shu</id>
    <content type="html"><![CDATA[<h2 id="section">1. 二叉查找树</h2>
<p>二叉查找树的性质 ：一个节点的key值大于等于它所有左子树节点的值，小于等于它所有右子树节点的值。 </p>

<p>中序遍历(inorder-tree-walk)的时间为<script type="math/tex">\Theta(n)</script>.</p>

<p>12.1-3 非递归 不用栈 中序遍历</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span /></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
<span class="line-number">23</span>
<span class="line-number">24</span>
</pre></td><td class="code"><pre><code class="c++"><span class="line"><span class="cm">/* 通过将节点的左子树中最右边节点的右孩子的指向（即q-&gt;right = p;）实现回溯。*/</span>
</span><span class="line"><span class="n">Inorder</span> <span class="n">Tree</span> <span class="n">Walk</span> <span class="p">(</span><span class="n">Node</span> <span class="o">*</span> <span class="n">p</span><span class="p">)</span>
</span><span class="line"><span class="p">{</span>
</span><span class="line">    <span class="n">Node</span> <span class="o">*</span> <span class="n">preprinted</span> <span class="o">=</span> <span class="nb">NULL</span><span class="p">;</span>
</span><span class="line">    <span class="k">while</span> <span class="p">(</span><span class="n">p</span><span class="p">)</span> <span class="p">{</span>
</span><span class="line">        <span class="n">Node</span> <span class="o">*</span> <span class="n">q</span> <span class="o">=</span> <span class="n">p</span><span class="o">-&gt;</span><span class="n">left</span><span class="p">;</span>
</span><span class="line">        <span class="k">if</span> <span class="p">(</span><span class="n">q</span><span class="p">)</span> <span class="p">{</span>
</span><span class="line">            <span class="k">while</span> <span class="p">(</span><span class="n">q</span> <span class="o">!=</span> <span class="n">preprinted</span> <span class="o">&amp;&amp;</span> <span class="n">q</span><span class="o">-&gt;</span><span class="n">right</span><span class="p">)</span> <span class="p">{</span>
</span><span class="line">                <span class="n">q</span> <span class="o">=</span> <span class="n">q</span><span class="o">-&gt;</span><span class="n">right</span><span class="p">;</span>
</span><span class="line">            <span class="p">}</span>
</span><span class="line">            <span class="k">if</span> <span class="p">(</span><span class="n">q</span> <span class="o">!=</span> <span class="n">preprinted</span><span class="p">)</span> <span class="p">{</span>
</span><span class="line">                <span class="n">q</span><span class="o">-&gt;</span><span class="n">right</span> <span class="o">=</span> <span class="n">p</span><span class="p">;</span>
</span><span class="line">                <span class="n">p</span> <span class="o">=</span> <span class="n">p</span><span class="o">-&gt;</span><span class="n">left</span><span class="p">;</span>
</span><span class="line">                <span class="k">continue</span><span class="p">;</span>
</span><span class="line">            <span class="p">}</span>
</span><span class="line">            <span class="k">else</span> <span class="p">{</span>
</span><span class="line">                <span class="n">q</span><span class="o">-&gt;</span><span class="n">right</span> <span class="o">=</span> <span class="nb">NULL</span><span class="p">;</span>
</span><span class="line">            <span class="p">}</span>
</span><span class="line">        <span class="p">}</span>
</span><span class="line">        <span class="n">printf</span><span class="p">(</span><span class="s">&quot;%d</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">,</span> <span class="n">p</span><span class="o">-&gt;</span><span class="n">key</span><span class="p">);</span>
</span><span class="line">        <span class="n">preprinted</span> <span class="o">=</span> <span class="n">p</span><span class="p">;</span>
</span><span class="line">        <span class="n">p</span> <span class="o">=</span> <span class="n">p</span><span class="o">-&gt;</span> <span class="n">right</span><span class="p">;</span>
</span><span class="line">    <span class="p">}</span>
</span><span class="line"><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<h2 id="section-1">2. 查询二叉查找树</h2>

<h2 id="section-2">3. 插入和删除</h2>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[CLRS chapter8 Sorting in Linear Time]]></title>
    <link href="http://iceout.github.com/blog/2012/06/15/clrs-chapter8-sorting-in-linear-time/"/>
    <updated>2012-06-15T16:42:00+08:00</updated>
    <id>http://iceout.github.com/blog/2012/06/15/clrs-chapter8-sorting-in-linear-time</id>
    <content type="html"><![CDATA[<p>之前介绍的排序算法都是属于比较排序算法，他们的时间下界为<script type="math/tex">\Omega(n\lg n)</script>。而一些非比较算法的时间复杂度可以为<script type="math/tex">\Theta(n)</script>。</p>

<h2 id="section">1.排序算法的时间下界</h2>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[CLRS第七章快速排序]]></title>
    <link href="http://iceout.github.com/blog/2012/06/13/clrsdi-qi-zhang-kuai-su-pai-xu/"/>
    <updated>2012-06-13T21:32:00+08:00</updated>
    <id>http://iceout.github.com/blog/2012/06/13/clrsdi-qi-zhang-kuai-su-pai-xu</id>
    <content type="html"><![CDATA[<p>虽然快速排序最坏时间复杂度为<script type="math/tex">\Theta(n^2)</script>，但是其平均复杂度为<script type="math/tex">\Theta(n\lg n)</script>，
且常数因子很小，所以快速排序通常是用于排序的最佳实践选择。</p>

<h2 id="section">1.快速排序的描述</h2>
<p>快速排序也是利用了分治的思想，先从数据集合里面选出一个元素作为主元（pivot element），根据主元把数据集分为两个子集，然后对子集进行快速排序。下面是代码描述：</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span /></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
</pre></td><td class="code"><pre><code class="python"><span class="line"><span class="k">def</span> <span class="nf">QUICKSORT</span><span class="p">(</span><span class="n">A</span><span class="p">,</span> <span class="n">begin</span><span class="p">,</span> <span class="n">end</span><span class="p">):</span>
</span><span class="line">    <span class="k">if</span> <span class="n">begin</span> <span class="o">&lt;</span> <span class="n">end</span><span class="p">:</span>
</span><span class="line">        <span class="n">mid</span> <span class="o">=</span> <span class="n">PARTITION</span><span class="p">(</span><span class="n">A</span><span class="p">,</span> <span class="n">begin</span><span class="p">,</span> <span class="n">end</span><span class="p">)</span>
</span><span class="line">        <span class="n">QUICKSORT</span><span class="p">(</span><span class="n">A</span><span class="p">,</span> <span class="n">begin</span><span class="p">,</span> <span class="n">mid</span><span class="o">-</span><span class="mi">1</span><span class="p">)</span>
</span><span class="line">        <span class="n">QUICKSORT</span><span class="p">(</span><span class="n">A</span><span class="p">,</span> <span class="n">mid</span><span class="p">,</span> <span class="n">end</span><span class="p">)</span>
</span><span class="line">
</span><span class="line"><span class="k">def</span> <span class="nf">PARTITION</span><span class="p">(</span><span class="n">A</span><span class="p">,</span> <span class="n">begin</span><span class="p">,</span> <span class="n">end</span><span class="p">):</span>
</span><span class="line">    <span class="n">x</span> <span class="o">=</span> <span class="n">A</span><span class="p">[</span><span class="n">end</span><span class="p">]</span>
</span><span class="line">    <span class="n">j</span> <span class="o">=</span> <span class="n">begin</span>
</span><span class="line">    <span class="n">i</span> <span class="o">=</span> <span class="n">begin</span>
</span><span class="line">    <span class="k">while</span> <span class="n">j</span> <span class="o">&lt;</span> <span class="n">end</span><span class="p">:</span>
</span><span class="line">        <span class="k">if</span> <span class="n">A</span><span class="p">[</span><span class="n">j</span><span class="p">]</span> <span class="o">&lt;=</span> <span class="n">x</span><span class="p">:</span>
</span><span class="line">            <span class="n">exchange</span><span class="p">(</span><span class="n">A</span><span class="p">[</span><span class="n">i</span><span class="p">],</span> <span class="n">A</span><span class="p">[</span><span class="n">j</span><span class="p">])</span>
</span><span class="line">            <span class="n">i</span> <span class="o">+=</span> <span class="mi">1</span>
</span><span class="line">        <span class="n">j</span> <span class="o">+=</span> <span class="mi">1</span>
</span><span class="line">    <span class="n">exchange</span><span class="p">(</span><span class="n">A</span><span class="p">[</span><span class="n">i</span><span class="p">],</span> <span class="n">A</span><span class="p">[</span><span class="n">end</span><span class="p">])</span>
</span><span class="line">    <span class="k">return</span> <span class="n">i</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<h2 id="section-1">2.快速排序的性能</h2>
<p>最坏和最好分别为\(\Theta(n^2)\)和\(\Theta(n\lg n)\)。
考虑平均情况时需要注意到：<strong>平均情况与最佳情况很接近</strong>。</p>

<h2 id="section-2">3.快排的随机化版本</h2>
<p>在算法中加入随机化成分，从而能够获得较好的平均性能。</p>

<p>在PARTITION开头处加入两行代码可以获得RANDOMIZED-PARTITION。</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span /></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
</pre></td><td class="code"><pre><code class="python"><span class="line"><span class="n">i</span> <span class="o">=</span> <span class="n">RANDOM</span><span class="p">(</span><span class="n">begin</span><span class="p">,</span> <span class="n">end</span><span class="p">)</span>
</span><span class="line"><span class="n">exchange</span><span class="p">(</span><span class="n">A</span><span class="p">[</span><span class="n">end</span><span class="p">],</span> <span class="n">A</span><span class="p">[</span><span class="n">i</span><span class="p">])</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<h2 id="section-3">4.快排分析</h2>
<ol>
  <li>最坏情况分析
具体不写了，结论\(\Theta(n^2)\)</li>
  <li>
    <p>期望运行时间
定义随机变量</p>

<script type="math/tex; mode=display">
X_{ij} = I\{z_i与z_j进行比较\};
</script>

    <p>算法总的比较次数（我们不关心执行一次PARTITIOM比较的次数）：</p>

<script type="math/tex; mode=display">
X = \sum_{i=1}^{n-1} \sum_{j=i+1}^{n} X_{ij};
</script>

<script type="math/tex; mode=display">E[X] = \sum_{i=1}^{n-1} \sum_{j=i+1}^{n} Pr\{z_i与z_j进行比较\};</script>

<script type="math/tex; mode=display">Pr\{z_i与z_j进行比较\}=\frac{1}{j-i+1}+\frac{1}{j-i+1}=\frac{2}{j-i+1};</script>

<script type="math/tex; mode=display">E[X]=\sum_{i=1}^{n-1}
\sum_{j=i+1}^{n}\frac{2}{j-i+1}=\sum_{i=1}^{n-1} \sum_{k=1}^{n-i}\frac{2}{k+1}<\sum_{i=1}^{n-1} \sum_{k=1}^{n}\frac{2}{k}=O(n\lg n);</script>
  </li>
</ol>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[CLRS_06_12]]></title>
    <link href="http://iceout.github.com/blog/2012/06/12/clrs-06-12/"/>
    <updated>2012-06-12T00:15:00+08:00</updated>
    <id>http://iceout.github.com/blog/2012/06/12/clrs-06-12</id>
    <content type="html"><![CDATA[<h1 id="section">第三章 函数的增长</h1>

<h2 id="section-1">3.1 渐进记号</h2>
<p>θ</p>

<h2 id="section-2">习题解答：</h2>
<ul>
  <li>3.2-3
 &gt;1. 证明：$$n! = \omeg
 &gt;1. 这这正正证明证明证明证明证明：<script type="math/tex">n! = \omega()</script></li>
</ul>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[践行GTD一周总结]]></title>
    <link href="http://iceout.github.com/blog/2012/06/03/jian-xing-gtd-yi-zhou-zong-jie/"/>
    <updated>2012-06-03T10:30:00+08:00</updated>
    <id>http://iceout.github.com/blog/2012/06/03/jian-xing-gtd-yi-zhou-zong-jie</id>
    <content type="html"><![CDATA[<p>从5月29号开始决定有一次实践GTD,虽然不是最认真的一次,但是到现在为止却也收获颇丰.</p>

<h3 id="section">回顾</h3>
<p>首先简要回顾一下一周的记录情况:</p>

<ul>
  <li>May 29: 计划任务共用时4:11:48,有一些任务没有写在任务列表上.</li>
  <li>May 30: 这一天共用时6:37:57,收集工作比第一天有所进步.</li>
  <li>May 31-Jun 1: 这两天不但没有做好收集工作,而且在以前的不足上没有丝毫改进,一点也没有明确目标.两天分别用时1:59:35和1:45:49.</li>
  <li>Jun 2: 昨天上午睡了过去,下午工作还行,有计划有目标,共用时4:37:02,不过打羽毛球用了3小时…</li>
</ul>

<h3 id="section-1">总结</h3>
<p>然后说一下体会,利用Astrid收集管理任务列表挺不错,虽然同步到日历上有些不足;每天总结时用表格记录时间还是不方便;综上,以后不同步到日历了,利用日历记录每天的时间花费.</p>

<p>另外发现用github page记录笔记挺好的,反正没什么见不得人的,虽然Evernote很不错,但是没有Linux客户端,而且排版让人很不爽,以后可以统一用github记录了,离线查看的问题以后想想办法.</p>

<p>这周的优点:想了半天,好像没有什么优点,I’m on the way算是一个吧.</p>

<p>不足:目前最大的不足是目标不明确,任务定的过于笼统,不清晰,还有就是很多工作没有列在任务清单上,使得效率非常低下,虽然在任务清单上的工作效率也不高,-_-!,还有一点是工作中总是被打断,刚工作一会儿就手痒,想点点网页,这是病,得治!以后除了hacker news,其他都用google reader看.</p>

<h3 id="section-2">结束</h3>
<p>改进措施:</p>

<ol>
  <li>Astrib不在同步到google日历,使用google日历总结每天的时间花费</li>
  <li>全面搜集,制定计划</li>
  <li>使用google reader查看网页</li>
  <li>使用github page记录笔记</li>
</ol>

<p>Winter is coming.</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[一个Python的bug]]></title>
    <link href="http://iceout.github.com/blog/2012/06/01/a-bug-of-python/"/>
    <updated>2012-06-01T14:22:00+08:00</updated>
    <id>http://iceout.github.com/blog/2012/06/01/a-bug-of-python</id>
    <content type="html"><![CDATA[<p>昨天阿文同学在写python程序时遇到一个奇怪的错误，经过搜索发现原来是python的一个bug。
python的说明在<a href="http://docs.python.org/c-api/init.html#Py_Finalize">这里</a>,
主要是这句话:</p>

<blockquote>
  <p>The destruction of modules and objects in modules is done in <strong>random order</strong>;
this may cause destructors (__del__() methods) to fail when they depend on
other objects (even functions) or modules.</p>
</blockquote>

<p>由于析构的顺序是随机的，所以会遇到一些意想不到的问题。</p>

<!-- more -->
<p>比如说，这段python代码：
&lt;div class=&#8217;bogus-wrapper&#8217;&gt;<notextile><figure class="code">&lt;figcaption&gt;<span />&lt;/figcaption&gt;&lt;div class=&#8221;highlight&#8221;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#8221;gutter&#8221;&gt;&lt;pre class=&#8221;line-numbers&#8221;&gt;<span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
<span class="line-number">23</span>
<span class="line-number">24</span>
<span class="line-number">25</span>
<span class="line-number">26</span>
<span class="line-number">27</span>
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#8217;code&#8217;&gt;&lt;pre&gt;<code class="python"><span class="line"><span class="k">class</span> <span class="nc">Person</span><span class="p">:</span>
</span><span class="line">    <span class="n">num</span> <span class="o">=</span> <span class="mi">0</span>
</span><span class="line">    <span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">name</span><span class="p">,</span> <span class="n">age</span><span class="p">):</span>
</span><span class="line">        <span class="n">Person</span><span class="o">.</span><span class="n">num</span> <span class="o">+=</span> <span class="mi">1</span>
</span><span class="line">        <span class="bp">self</span><span class="o">.</span><span class="n">name</span> <span class="o">=</span> <span class="n">name</span>
</span><span class="line">        <span class="bp">self</span><span class="o">.</span><span class="n">age</span> <span class="o">=</span> <span class="n">age</span>
</span><span class="line">
</span><span class="line">    <span class="k">def</span> <span class="nf">__del__</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
</span><span class="line">        <span class="n">Person</span><span class="o">.</span><span class="n">num</span> <span class="o">-=</span> <span class="mi">1</span>
</span><span class="line">
</span><span class="line">    <span class="k">def</span> <span class="nf">tell</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
</span><span class="line">        <span class="k">print</span> <span class="s">&#39;Person name is </span><span class="si">%s</span><span class="s"> and age is </span><span class="si">%s</span><span class="s">&#39;</span> <span class="o">%</span> <span class="p">(</span><span class="bp">self</span><span class="o">.</span><span class="n">name</span><span class="p">,</span> <span class="bp">self</span><span class="o">.</span><span class="n">age</span><span class="p">)</span>
</span><span class="line">
</span><span class="line"><span class="k">class</span> <span class="nc">Teacher</span><span class="p">(</span><span class="n">Person</span><span class="p">):</span>
</span><span class="line">    <span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">name</span><span class="p">,</span> <span class="n">age</span><span class="p">,</span> <span class="n">salary</span><span class="p">):</span>
</span><span class="line">        <span class="n">Person</span><span class="o">.</span><span class="n">__init__</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">name</span><span class="p">,</span> <span class="n">age</span><span class="p">)</span>
</span><span class="line">        <span class="bp">self</span><span class="o">.</span><span class="n">salary</span> <span class="o">=</span> <span class="n">salary</span>
</span><span class="line">
</span><span class="line">    <span class="k">def</span> <span class="nf">__del__</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
</span><span class="line">        <span class="n">Person</span><span class="o">.</span><span class="n">__del__</span><span class="p">(</span><span class="bp">self</span><span class="p">)</span>
</span><span class="line">
</span><span class="line">    <span class="k">def</span> <span class="nf">tell</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
</span><span class="line">        <span class="n">Person</span><span class="o">.</span><span class="n">tell</span><span class="p">(</span><span class="bp">self</span><span class="p">)</span>
</span><span class="line">        <span class="k">print</span> <span class="s">&#39;salary is&#39;</span><span class="p">,</span> <span class="bp">self</span><span class="o">.</span><span class="n">salary</span>
</span><span class="line">
</span><span class="line"><span class="n">t</span> <span class="o">=</span> <span class="n">Teacher</span><span class="p">(</span><span class="s">&#39;evan&#39;</span><span class="p">,</span> <span class="mi">21</span><span class="p">,</span> <span class="mi">10000</span><span class="p">)</span>
</span><span class="line"><span class="n">t</span><span class="o">.</span><span class="n">tell</span><span class="p">()</span>
</span></code>&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;</figure></notextile>&lt;/div&gt;
当程序执行完毕，调用__del__析构时，Person的__del__先于t的__del__被调用，所以当调用t的__del__时，就会遇到这个错误：
&gt;Exception AttributeError: “‘NoneType’ object has no attribute ‘__del__’” in 
&lt;bound method Teacher.__del__ of &lt;__main__.Teacher instance at 0xb72cbd0c&gt;&gt; ignored</p>

<p>一个解决方案是不把对象放到module层，即把最后两行代码改为：
&lt;div class=&#8217;bogus-wrapper&#8217;&gt;<notextile><figure class="code">&lt;figcaption&gt;<span />&lt;/figcaption&gt;&lt;div class=&#8221;highlight&#8221;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#8221;gutter&#8221;&gt;&lt;pre class=&#8221;line-numbers&#8221;&gt;<span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#8217;code&#8217;&gt;&lt;pre&gt;<code class="python"><span class="line"><span class="k">def</span> <span class="nf">main</span><span class="p">():</span>
</span><span class="line">    <span class="n">t</span> <span class="o">=</span> <span class="n">Teacher</span><span class="p">(</span><span class="s">&#39;evan&#39;</span><span class="p">,</span> <span class="mi">21</span><span class="p">,</span> <span class="mi">10000</span><span class="p">)</span>
</span><span class="line">    <span class="n">t</span><span class="o">.</span><span class="n">tell</span><span class="p">()</span>
</span><span class="line">
</span><span class="line"><span class="k">if</span> <span class="n">__name__</span> <span class="o">==</span> <span class="s">&quot;__main__&quot;</span><span class="p">:</span>
</span><span class="line">    <span class="n">main</span><span class="p">()</span>
</span></code>&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;</figure></notextile>&lt;/div&gt;</p>

<p>参看资料在<a href="https://groups.google.com/d/topic/python-cn/Md9OYHZ4JZk/discussion">这里</a>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[a program of changing keyboard mapping]]></title>
    <link href="http://iceout.github.com/blog/2012/05/22/a-program-of-changing-keyboard-mapping/"/>
    <updated>2012-05-22T16:48:00+08:00</updated>
    <id>http://iceout.github.com/blog/2012/05/22/a-program-of-changing-keyboard-mapping</id>
    <content type="html"><![CDATA[<h2 id="section">一个修改键盘映射的程序</h2>

<p>以前修改别人的代码而成的键盘映射程序，今天无意中看到了，共享一下。
该程序把1,2,3和4（非小键盘）四个键分别映射成为a,b,c和d.
具体代码见程序的136~191行。只在windows下有效。。。
<!--more --></p>

<h2 id="section-1">程序代码</h2>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span /></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
<span class="line-number">23</span>
<span class="line-number">24</span>
<span class="line-number">25</span>
<span class="line-number">26</span>
<span class="line-number">27</span>
<span class="line-number">28</span>
<span class="line-number">29</span>
<span class="line-number">30</span>
<span class="line-number">31</span>
<span class="line-number">32</span>
<span class="line-number">33</span>
<span class="line-number">34</span>
<span class="line-number">35</span>
<span class="line-number">36</span>
<span class="line-number">37</span>
<span class="line-number">38</span>
<span class="line-number">39</span>
<span class="line-number">40</span>
<span class="line-number">41</span>
<span class="line-number">42</span>
<span class="line-number">43</span>
<span class="line-number">44</span>
<span class="line-number">45</span>
<span class="line-number">46</span>
<span class="line-number">47</span>
<span class="line-number">48</span>
<span class="line-number">49</span>
<span class="line-number">50</span>
<span class="line-number">51</span>
<span class="line-number">52</span>
<span class="line-number">53</span>
<span class="line-number">54</span>
<span class="line-number">55</span>
<span class="line-number">56</span>
<span class="line-number">57</span>
<span class="line-number">58</span>
<span class="line-number">59</span>
<span class="line-number">60</span>
<span class="line-number">61</span>
<span class="line-number">62</span>
<span class="line-number">63</span>
<span class="line-number">64</span>
<span class="line-number">65</span>
<span class="line-number">66</span>
<span class="line-number">67</span>
<span class="line-number">68</span>
<span class="line-number">69</span>
<span class="line-number">70</span>
<span class="line-number">71</span>
<span class="line-number">72</span>
<span class="line-number">73</span>
<span class="line-number">74</span>
<span class="line-number">75</span>
<span class="line-number">76</span>
<span class="line-number">77</span>
<span class="line-number">78</span>
<span class="line-number">79</span>
<span class="line-number">80</span>
<span class="line-number">81</span>
<span class="line-number">82</span>
<span class="line-number">83</span>
<span class="line-number">84</span>
<span class="line-number">85</span>
<span class="line-number">86</span>
<span class="line-number">87</span>
<span class="line-number">88</span>
<span class="line-number">89</span>
<span class="line-number">90</span>
<span class="line-number">91</span>
<span class="line-number">92</span>
<span class="line-number">93</span>
<span class="line-number">94</span>
<span class="line-number">95</span>
<span class="line-number">96</span>
<span class="line-number">97</span>
<span class="line-number">98</span>
<span class="line-number">99</span>
<span class="line-number">100</span>
<span class="line-number">101</span>
<span class="line-number">102</span>
<span class="line-number">103</span>
<span class="line-number">104</span>
<span class="line-number">105</span>
<span class="line-number">106</span>
<span class="line-number">107</span>
<span class="line-number">108</span>
<span class="line-number">109</span>
<span class="line-number">110</span>
<span class="line-number">111</span>
<span class="line-number">112</span>
<span class="line-number">113</span>
<span class="line-number">114</span>
<span class="line-number">115</span>
<span class="line-number">116</span>
<span class="line-number">117</span>
<span class="line-number">118</span>
<span class="line-number">119</span>
<span class="line-number">120</span>
<span class="line-number">121</span>
<span class="line-number">122</span>
<span class="line-number">123</span>
<span class="line-number">124</span>
<span class="line-number">125</span>
<span class="line-number">126</span>
<span class="line-number">127</span>
<span class="line-number">128</span>
<span class="line-number">129</span>
<span class="line-number">130</span>
<span class="line-number">131</span>
<span class="line-number">132</span>
<span class="line-number">133</span>
<span class="line-number">134</span>
<span class="line-number">135</span>
<span class="line-number">136</span>
<span class="line-number">137</span>
<span class="line-number">138</span>
<span class="line-number">139</span>
<span class="line-number">140</span>
<span class="line-number">141</span>
<span class="line-number">142</span>
<span class="line-number">143</span>
<span class="line-number">144</span>
<span class="line-number">145</span>
<span class="line-number">146</span>
<span class="line-number">147</span>
<span class="line-number">148</span>
<span class="line-number">149</span>
<span class="line-number">150</span>
<span class="line-number">151</span>
<span class="line-number">152</span>
<span class="line-number">153</span>
<span class="line-number">154</span>
<span class="line-number">155</span>
<span class="line-number">156</span>
<span class="line-number">157</span>
<span class="line-number">158</span>
<span class="line-number">159</span>
<span class="line-number">160</span>
<span class="line-number">161</span>
<span class="line-number">162</span>
<span class="line-number">163</span>
<span class="line-number">164</span>
<span class="line-number">165</span>
<span class="line-number">166</span>
<span class="line-number">167</span>
<span class="line-number">168</span>
<span class="line-number">169</span>
<span class="line-number">170</span>
<span class="line-number">171</span>
<span class="line-number">172</span>
<span class="line-number">173</span>
<span class="line-number">174</span>
<span class="line-number">175</span>
<span class="line-number">176</span>
<span class="line-number">177</span>
<span class="line-number">178</span>
<span class="line-number">179</span>
<span class="line-number">180</span>
<span class="line-number">181</span>
<span class="line-number">182</span>
<span class="line-number">183</span>
<span class="line-number">184</span>
<span class="line-number">185</span>
<span class="line-number">186</span>
<span class="line-number">187</span>
<span class="line-number">188</span>
<span class="line-number">189</span>
<span class="line-number">190</span>
<span class="line-number">191</span>
<span class="line-number">192</span>
<span class="line-number">193</span>
<span class="line-number">194</span>
<span class="line-number">195</span>
<span class="line-number">196</span>
</pre></td><td class="code"><pre><code class="c++"><span class="line"><span class="cm">/*</span>
</span><span class="line"><span class="cm">	PROJECT:</span>
</span><span class="line"><span class="cm">		Keymapper v1.1</span>
</span><span class="line">
</span><span class="line"><span class="cm">	DESCRIPTION:</span>
</span><span class="line"><span class="cm">		Keymapper is a portable tool to remap Caps Lock to Backspace without rebooting.</span>
</span><span class="line"><span class="cm">		Intended for Colemak enthusiasts roaming on others&#39; QWERTY keyboard layouts.</span>
</span><span class="line">
</span><span class="line"><span class="cm">		Caps Lock keypresses are intercepted with a global keyboard hook (SetWindowsHookEx)</span>
</span><span class="line"><span class="cm">		and a backspace keypress is simulated in its place to improve touch typing (keybd_event).</span>
</span><span class="line">
</span><span class="line"><span class="cm">		Certain anti-virus heuristics may classify the executable as a potential threat</span>
</span><span class="line"><span class="cm">		due to the keylogging potential of a global keyboard hook. The right way to remap</span>
</span><span class="line"><span class="cm">		your keyboard is using a registry tool like SharpKeys.</span>
</span><span class="line">
</span><span class="line"><span class="cm">	LICENCE:</span>
</span><span class="line"><span class="cm">		Copyright 2010 FreshCode (www.freshcode.co.za).</span>
</span><span class="line">
</span><span class="line"><span class="cm">		Redistribution and use in source and binary forms, with or without modification, are</span>
</span><span class="line"><span class="cm">		permitted provided that the following conditions are met:</span>
</span><span class="line">
</span><span class="line"><span class="cm">			1. Redistributions of source code must retain the above copyright notice, this</span>
</span><span class="line"><span class="cm">			list of conditions and the following disclaimer.</span>
</span><span class="line">
</span><span class="line"><span class="cm">			2. Redistributions in binary form must reproduce the above copyright notice, this</span>
</span><span class="line"><span class="cm">			list of conditions and the following disclaimer in the documentation and/or other</span>
</span><span class="line"><span class="cm">			materials provided with the distribution.</span>
</span><span class="line">
</span><span class="line"><span class="cm">		This software is provided by FreshCode ``as is&#39;&#39; without any express or implied warranty</span>
</span><span class="line"><span class="cm">		blah blah blah if you break stuff, you&#39;re an idiot.</span>
</span><span class="line"><span class="cm">*/</span>
</span><span class="line">
</span><span class="line"><span class="cp">// Make a really small executable</span>
</span><span class="line"><span class="cp">#pragma comment(linker,&quot;/ENTRY:main&quot;) </span><span class="c1">// Set entry point</span>
</span><span class="line">
</span><span class="line"><span class="cp">// Merge all default sections into the .text (code) section.</span>
</span><span class="line"><span class="cp">#pragma comment(linker,&quot;/MERGE:.rdata=.data&quot;)</span>
</span><span class="line"><span class="cp">#pragma comment(linker,&quot;/MERGE:.text=.data&quot;)</span>
</span><span class="line">
</span><span class="line"><span class="cp">#pragma comment(lib, &quot;msvcrt.lib&quot;)</span>
</span><span class="line">
</span><span class="line"><span class="cp">#if (_MSC_VER &lt; 1300)</span>
</span><span class="line"><span class="cp">	#pragma comment(linker,&quot;/IGNORE:4078&quot;)</span>
</span><span class="line"><span class="cp">	#pragma comment(linker,&quot;/OPT:NOWIN98&quot;)</span>
</span><span class="line"><span class="cp">#endif</span>
</span><span class="line">
</span><span class="line"><span class="cp">#pragma comment(linker, &quot;/FILEALIGN:0x200&quot;)</span>
</span><span class="line">
</span><span class="line"><span class="cp">#define WIN32_LEAN_AND_MEAN</span>
</span><span class="line"><span class="cp">#define VC_EXTRALEAN</span>
</span><span class="line">
</span><span class="line"><span class="cp">#include &lt;windows.h&gt;</span>
</span><span class="line">
</span><span class="line"><span class="n">LRESULT</span> <span class="n">CALLBACK</span> <span class="n">LowLevelKeyboardProc</span><span class="p">(</span><span class="kt">int</span> <span class="n">nCode</span><span class="p">,</span> <span class="n">WPARAM</span> <span class="n">wParam</span><span class="p">,</span> <span class="n">LPARAM</span> <span class="n">lParam</span><span class="p">);</span>
</span><span class="line"><span class="n">BOOL</span> <span class="n">WINAPI</span> <span class="n">ConsoleEventHandler</span><span class="p">(</span><span class="n">DWORD</span> <span class="n">dwCtrlType</span><span class="p">);</span> <span class="c1">// for graceful exit</span>
</span><span class="line"><span class="n">DWORD</span> <span class="n">dwMainThread</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="c1">// because apparently the console event handler thread for Ctrl+C is different from the main thread</span>
</span><span class="line">
</span><span class="line"><span class="kt">int</span> <span class="n">main</span><span class="p">()</span>
</span><span class="line"><span class="p">{</span>
</span><span class="line">	<span class="k">const</span> <span class="kt">char</span> <span class="n">message</span><span class="p">[]</span> <span class="o">=</span>
</span><span class="line">		<span class="s">&quot;Caps Lock Remapper</span><span class="se">\n</span><span class="s">&quot;</span>
</span><span class="line">		<span class="s">&quot;Remaps Caps Lock to Backspace on the fly without rebooting.</span><span class="se">\n</span><span class="s">&quot;</span>
</span><span class="line">		<span class="s">&quot;Copyright 2010 FreshCode (www.freshcode.co.za)</span><span class="se">\n</span><span class="s">&quot;</span>
</span><span class="line">		<span class="s">&quot;</span><span class="se">\n</span><span class="s">Press Ctrl+C or close window to exit.</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">;</span>
</span><span class="line">
</span><span class="line">	<span class="n">DWORD</span> <span class="n">count</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class="line">	<span class="n">HANDLE</span> <span class="n">hStdOut</span> <span class="o">=</span> <span class="n">GetStdHandle</span><span class="p">(</span><span class="n">STD_OUTPUT_HANDLE</span><span class="p">);</span>
</span><span class="line">	<span class="n">WriteConsoleA</span><span class="p">(</span><span class="n">hStdOut</span><span class="p">,</span> <span class="n">message</span><span class="p">,</span> <span class="k">sizeof</span><span class="p">(</span><span class="n">message</span><span class="p">)</span><span class="o">-</span><span class="mi">2</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">count</span><span class="p">,</span> <span class="nb">NULL</span><span class="p">);</span>
</span><span class="line">
</span><span class="line">	<span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="n">SetConsoleCtrlHandler</span><span class="p">(</span><span class="n">ConsoleEventHandler</span><span class="p">,</span> <span class="n">TRUE</span><span class="p">))</span>
</span><span class="line">	<span class="p">{</span>
</span><span class="line">		<span class="k">return</span> <span class="o">-</span><span class="mi">1</span><span class="p">;</span>
</span><span class="line">	<span class="p">}</span> <span class="k">else</span>
</span><span class="line">	<span class="p">{</span>
</span><span class="line">		<span class="n">dwMainThread</span> <span class="o">=</span> <span class="n">GetCurrentThreadId</span><span class="p">();</span>
</span><span class="line">	<span class="p">}</span>
</span><span class="line">
</span><span class="line">	<span class="c1">// Retrieve the applications instance</span>
</span><span class="line">	<span class="n">HINSTANCE</span> <span class="n">appInstance</span> <span class="o">=</span> <span class="n">GetModuleHandle</span><span class="p">(</span><span class="nb">NULL</span><span class="p">);</span>
</span><span class="line">
</span><span class="line">	<span class="c1">// Attach global keyboard hook to capture keystrokes</span>
</span><span class="line">	<span class="n">HHOOK</span> <span class="n">hHook</span> <span class="o">=</span> <span class="n">SetWindowsHookEx</span><span class="p">(</span><span class="n">WH_KEYBOARD_LL</span><span class="p">,</span> <span class="n">LowLevelKeyboardProc</span><span class="p">,</span> <span class="n">appInstance</span><span class="p">,</span> <span class="mi">0</span><span class="p">);</span>
</span><span class="line">	<span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="n">hHook</span><span class="p">)</span>
</span><span class="line">		<span class="k">return</span> <span class="o">-</span><span class="mi">2</span><span class="p">;</span>
</span><span class="line">
</span><span class="line">	<span class="n">MSG</span> <span class="n">msg</span><span class="p">;</span>
</span><span class="line">
</span><span class="line">	<span class="k">while</span><span class="p">(</span><span class="n">GetMessage</span><span class="p">(</span><span class="o">&amp;</span><span class="n">msg</span><span class="p">,</span> <span class="nb">NULL</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">)</span> <span class="o">&gt;</span> <span class="mi">0</span><span class="p">)</span>
</span><span class="line">	<span class="p">{</span>
</span><span class="line">		<span class="n">TranslateMessage</span><span class="p">(</span><span class="o">&amp;</span><span class="n">msg</span><span class="p">);</span>
</span><span class="line">		<span class="n">DispatchMessage</span><span class="p">(</span><span class="o">&amp;</span><span class="n">msg</span><span class="p">);</span>
</span><span class="line">	<span class="p">}</span>
</span><span class="line">
</span><span class="line">	<span class="c1">// Clean up</span>
</span><span class="line">	<span class="n">UnhookWindowsHookEx</span><span class="p">(</span><span class="n">hHook</span><span class="p">);</span>
</span><span class="line">	<span class="n">SetConsoleCtrlHandler</span><span class="p">(</span><span class="n">ConsoleEventHandler</span><span class="p">,</span> <span class="n">FALSE</span><span class="p">);</span>
</span><span class="line">
</span><span class="line">	<span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
</span><span class="line"><span class="p">}</span>
</span><span class="line">
</span><span class="line"><span class="n">LRESULT</span> <span class="n">CALLBACK</span> <span class="n">LowLevelKeyboardProc</span><span class="p">(</span><span class="kt">int</span> <span class="n">nCode</span><span class="p">,</span> <span class="n">WPARAM</span> <span class="n">wParam</span><span class="p">,</span> <span class="n">LPARAM</span> <span class="n">lParam</span><span class="p">)</span>
</span><span class="line"><span class="p">{</span>
</span><span class="line">	<span class="n">KBDLLHOOKSTRUCT</span> <span class="o">*</span><span class="n">pKeyBoard</span> <span class="o">=</span> <span class="p">(</span><span class="n">KBDLLHOOKSTRUCT</span> <span class="o">*</span><span class="p">)</span><span class="n">lParam</span><span class="p">;</span>
</span><span class="line">
</span><span class="line">	<span class="k">switch</span><span class="p">(</span> <span class="n">pKeyBoard</span><span class="o">-&gt;</span><span class="n">vkCode</span> <span class="p">)</span>
</span><span class="line">	<span class="p">{</span>
</span><span class="line"><span class="cm">/*        case VK_CAPITAL:</span>
</span><span class="line"><span class="cm">            {</span>
</span><span class="line"><span class="cm">                switch (wParam)</span>
</span><span class="line"><span class="cm">                {</span>
</span><span class="line"><span class="cm">                case WM_KEYDOWN:</span>
</span><span class="line"><span class="cm">                    keybd_event(VK_BACK, 0x8e, 0, 0);</span>
</span><span class="line"><span class="cm">                    return 1;</span>
</span><span class="line"><span class="cm">                case WM_KEYUP:</span>
</span><span class="line"><span class="cm">                    keybd_event(VK_BACK, 0x8e, KEYEVENTF_KEYUP, 0);</span>
</span><span class="line"><span class="cm">                    return 1;</span>
</span><span class="line"><span class="cm">                }</span>
</span><span class="line"><span class="cm">            }</span>
</span><span class="line"><span class="cm">            break;*/</span>
</span><span class="line">            <span class="c1">//0x31 == 1;0x41 == a;</span>
</span><span class="line">        <span class="k">case</span> <span class="mh">0x31</span><span class="o">:</span>
</span><span class="line">            <span class="p">{</span>
</span><span class="line">                <span class="k">switch</span> <span class="p">(</span><span class="n">wParam</span><span class="p">)</span>
</span><span class="line">                <span class="p">{</span>
</span><span class="line">                <span class="k">case</span> <span class="nl">WM_KEYDOWN:</span>
</span><span class="line">                    <span class="n">keybd_event</span><span class="p">(</span><span class="mh">0x41</span><span class="p">,</span> <span class="mh">0x8e</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">);</span>
</span><span class="line">                    <span class="k">return</span> <span class="mi">1</span><span class="p">;</span>
</span><span class="line">                <span class="k">case</span> <span class="nl">WM_KEYUP:</span>
</span><span class="line">                    <span class="n">keybd_event</span><span class="p">(</span><span class="mh">0x41</span><span class="p">,</span> <span class="mh">0x8e</span><span class="p">,</span> <span class="n">KEYEVENTF_KEYUP</span><span class="p">,</span> <span class="mi">0</span><span class="p">);</span>
</span><span class="line">                    <span class="k">return</span> <span class="mi">1</span><span class="p">;</span>
</span><span class="line">                <span class="p">}</span>
</span><span class="line">            <span class="p">}</span>
</span><span class="line">            <span class="k">break</span><span class="p">;</span>
</span><span class="line">            <span class="c1">//0x32 == 2;0x42 == b;</span>
</span><span class="line">        <span class="k">case</span> <span class="mh">0x32</span><span class="o">:</span>
</span><span class="line">            <span class="p">{</span>
</span><span class="line">                <span class="k">switch</span> <span class="p">(</span><span class="n">wParam</span><span class="p">)</span>
</span><span class="line">                <span class="p">{</span>
</span><span class="line">                <span class="k">case</span> <span class="nl">WM_KEYDOWN:</span>
</span><span class="line">                    <span class="n">keybd_event</span><span class="p">(</span><span class="mh">0x42</span><span class="p">,</span> <span class="mh">0x8e</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">);</span>
</span><span class="line">                    <span class="k">return</span> <span class="mi">1</span><span class="p">;</span>
</span><span class="line">                <span class="k">case</span> <span class="nl">WM_KEYUP:</span>
</span><span class="line">                    <span class="n">keybd_event</span><span class="p">(</span><span class="mh">0x42</span><span class="p">,</span> <span class="mh">0x8e</span><span class="p">,</span> <span class="n">KEYEVENTF_KEYUP</span><span class="p">,</span> <span class="mi">0</span><span class="p">);</span>
</span><span class="line">                    <span class="k">return</span> <span class="mi">1</span><span class="p">;</span>
</span><span class="line">                <span class="p">}</span>
</span><span class="line">            <span class="p">}</span>
</span><span class="line">            <span class="k">break</span><span class="p">;</span>
</span><span class="line">            <span class="c1">//0x33 == 3;0x43 == c;</span>
</span><span class="line">        <span class="k">case</span> <span class="mh">0x33</span><span class="o">:</span>
</span><span class="line">            <span class="p">{</span>
</span><span class="line">                <span class="k">switch</span> <span class="p">(</span><span class="n">wParam</span><span class="p">)</span>
</span><span class="line">                <span class="p">{</span>
</span><span class="line">                <span class="k">case</span> <span class="nl">WM_KEYDOWN:</span>
</span><span class="line">                    <span class="n">keybd_event</span><span class="p">(</span><span class="mh">0x43</span><span class="p">,</span> <span class="mh">0x8e</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">);</span>
</span><span class="line">                    <span class="k">return</span> <span class="mi">1</span><span class="p">;</span>
</span><span class="line">                <span class="k">case</span> <span class="nl">WM_KEYUP:</span>
</span><span class="line">                    <span class="n">keybd_event</span><span class="p">(</span><span class="mh">0x43</span><span class="p">,</span> <span class="mh">0x8e</span><span class="p">,</span> <span class="n">KEYEVENTF_KEYUP</span><span class="p">,</span> <span class="mi">0</span><span class="p">);</span>
</span><span class="line">                    <span class="k">return</span> <span class="mi">1</span><span class="p">;</span>
</span><span class="line">                <span class="p">}</span>
</span><span class="line">            <span class="p">}</span>
</span><span class="line">            <span class="k">break</span><span class="p">;</span>
</span><span class="line">            <span class="c1">//0x34 == 4;0x44 == d;</span>
</span><span class="line">        <span class="k">case</span> <span class="mh">0x34</span><span class="o">:</span>
</span><span class="line">            <span class="p">{</span>
</span><span class="line">                <span class="k">switch</span> <span class="p">(</span><span class="n">wParam</span><span class="p">)</span>
</span><span class="line">                <span class="p">{</span>
</span><span class="line">                <span class="k">case</span> <span class="nl">WM_KEYDOWN:</span>
</span><span class="line">                    <span class="n">keybd_event</span><span class="p">(</span><span class="mh">0x44</span><span class="p">,</span> <span class="mh">0x8e</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">);</span>
</span><span class="line">                    <span class="k">return</span> <span class="mi">1</span><span class="p">;</span>
</span><span class="line">                <span class="k">case</span> <span class="nl">WM_KEYUP:</span>
</span><span class="line">                    <span class="n">keybd_event</span><span class="p">(</span><span class="mh">0x44</span><span class="p">,</span> <span class="mh">0x8e</span><span class="p">,</span> <span class="n">KEYEVENTF_KEYUP</span><span class="p">,</span> <span class="mi">0</span><span class="p">);</span>
</span><span class="line">                    <span class="k">return</span> <span class="mi">1</span><span class="p">;</span>
</span><span class="line">                <span class="p">}</span>
</span><span class="line">            <span class="p">}</span>
</span><span class="line">            <span class="k">break</span><span class="p">;</span>
</span><span class="line">		<span class="k">default</span><span class="o">:</span>
</span><span class="line">			<span class="k">return</span> <span class="n">CallNextHookEx</span><span class="p">(</span> <span class="nb">NULL</span><span class="p">,</span> <span class="n">nCode</span><span class="p">,</span> <span class="n">wParam</span><span class="p">,</span> <span class="n">lParam</span> <span class="p">);</span>
</span><span class="line">	<span class="p">}</span>
</span><span class="line">
</span><span class="line">	<span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
</span><span class="line"><span class="p">}</span>
</span><span class="line">
</span><span class="line">
</span><span class="line"><span class="n">BOOL</span> <span class="n">WINAPI</span> <span class="n">ConsoleEventHandler</span><span class="p">(</span><span class="n">DWORD</span> <span class="n">dwCtrlType</span><span class="p">)</span>
</span><span class="line"><span class="p">{</span>
</span><span class="line">    <span class="k">switch</span><span class="p">(</span><span class="n">dwCtrlType</span><span class="p">)</span>
</span><span class="line">    <span class="p">{</span>
</span><span class="line">        <span class="k">case</span> <span class="nl">CTRL_C_EVENT:</span>
</span><span class="line">		<span class="k">case</span> <span class="nl">CTRL_CLOSE_EVENT:</span>
</span><span class="line">			<span class="n">PostThreadMessage</span><span class="p">(</span><span class="n">dwMainThread</span><span class="p">,</span> <span class="n">WM_QUIT</span><span class="p">,</span> <span class="nb">NULL</span><span class="p">,</span> <span class="nb">NULL</span><span class="p">);</span>
</span><span class="line">			<span class="k">return</span> <span class="n">TRUE</span><span class="p">;</span>
</span><span class="line">
</span><span class="line">        <span class="k">default</span><span class="o">:</span>
</span><span class="line">            <span class="k">return</span> <span class="n">FALSE</span><span class="p">;</span>
</span><span class="line">    <span class="p">}</span>
</span><span class="line"><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[poj 1035:Spell checker]]></title>
    <link href="http://iceout.github.com/blog/2012/05/07/poj-1035/"/>
    <updated>2012-05-07T12:36:00+08:00</updated>
    <id>http://iceout.github.com/blog/2012/05/07/poj-1035</id>
    <content type="html"><![CDATA[<h2 id="section">题目说明</h2>
<p><a href="http://poj.org/problem?id=1035">原题在这里。</a></p>

<p>很简单的一道题，输入分为两部分，首先是一个字典,最多包含10000个词语。以一个“#”作为字典的结束。
剩余部分为需要检查的词语，也是以“#”结束。</p>

<p>所有的词语都是由小写字母组成，最多包含15个字母。每个词占语一行。
如果所检查的词语正确则输出“is correct”，否则则根据三条规则输出相近的词语。三条规则如下：</p>

<ul>
  <li>leting of one letter from the word;</li>
  <li>replacing of one letter in the word with an arbitrary letter;</li>
  <li>inserting of one arbitrary letter into the word. </li>
</ul>

<!--more-->

<h2 id="section-1">程序代码</h2>
<p>我的初步解法内存消耗360K，时间235MS。代码在<a href="https://github.com/iceout/poj/blob/a76987067dc373785e245cf990e8258ea21c2984/poj1035.c">这里</a>，其实结构还算清晰，就是效率不高，-_-，待优化。</p>

<p><em>update：</em>
进行了一些优化，首先进行排序，然后通过二分法查找是否为正确的词语，是的话输出，否则就查找相近的词语。
内存增加到了440K，时间缩短为125MS。不知道那些60、70MS怎么优化的。。。</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span>poj1035:spell checker </span><a href="https://github.com/iceout/poj/blob/master/poj1035.c">link</a></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
<span class="line-number">23</span>
<span class="line-number">24</span>
<span class="line-number">25</span>
<span class="line-number">26</span>
<span class="line-number">27</span>
<span class="line-number">28</span>
<span class="line-number">29</span>
<span class="line-number">30</span>
<span class="line-number">31</span>
<span class="line-number">32</span>
<span class="line-number">33</span>
<span class="line-number">34</span>
<span class="line-number">35</span>
<span class="line-number">36</span>
<span class="line-number">37</span>
<span class="line-number">38</span>
<span class="line-number">39</span>
<span class="line-number">40</span>
<span class="line-number">41</span>
<span class="line-number">42</span>
<span class="line-number">43</span>
<span class="line-number">44</span>
<span class="line-number">45</span>
<span class="line-number">46</span>
<span class="line-number">47</span>
<span class="line-number">48</span>
<span class="line-number">49</span>
<span class="line-number">50</span>
<span class="line-number">51</span>
<span class="line-number">52</span>
<span class="line-number">53</span>
<span class="line-number">54</span>
<span class="line-number">55</span>
<span class="line-number">56</span>
<span class="line-number">57</span>
<span class="line-number">58</span>
<span class="line-number">59</span>
<span class="line-number">60</span>
<span class="line-number">61</span>
<span class="line-number">62</span>
<span class="line-number">63</span>
<span class="line-number">64</span>
<span class="line-number">65</span>
<span class="line-number">66</span>
<span class="line-number">67</span>
<span class="line-number">68</span>
<span class="line-number">69</span>
<span class="line-number">70</span>
<span class="line-number">71</span>
<span class="line-number">72</span>
<span class="line-number">73</span>
<span class="line-number">74</span>
<span class="line-number">75</span>
<span class="line-number">76</span>
<span class="line-number">77</span>
<span class="line-number">78</span>
<span class="line-number">79</span>
<span class="line-number">80</span>
<span class="line-number">81</span>
<span class="line-number">82</span>
<span class="line-number">83</span>
<span class="line-number">84</span>
<span class="line-number">85</span>
<span class="line-number">86</span>
<span class="line-number">87</span>
<span class="line-number">88</span>
<span class="line-number">89</span>
<span class="line-number">90</span>
<span class="line-number">91</span>
<span class="line-number">92</span>
<span class="line-number">93</span>
<span class="line-number">94</span>
<span class="line-number">95</span>
<span class="line-number">96</span>
<span class="line-number">97</span>
<span class="line-number">98</span>
<span class="line-number">99</span>
<span class="line-number">100</span>
<span class="line-number">101</span>
<span class="line-number">102</span>
<span class="line-number">103</span>
<span class="line-number">104</span>
<span class="line-number">105</span>
<span class="line-number">106</span>
<span class="line-number">107</span>
<span class="line-number">108</span>
<span class="line-number">109</span>
<span class="line-number">110</span>
<span class="line-number">111</span>
<span class="line-number">112</span>
<span class="line-number">113</span>
<span class="line-number">114</span>
<span class="line-number">115</span>
<span class="line-number">116</span>
<span class="line-number">117</span>
<span class="line-number">118</span>
<span class="line-number">119</span>
<span class="line-number">120</span>
<span class="line-number">121</span>
<span class="line-number">122</span>
<span class="line-number">123</span>
<span class="line-number">124</span>
<span class="line-number">125</span>
<span class="line-number">126</span>
<span class="line-number">127</span>
<span class="line-number">128</span>
<span class="line-number">129</span>
<span class="line-number">130</span>
<span class="line-number">131</span>
<span class="line-number">132</span>
<span class="line-number">133</span>
<span class="line-number">134</span>
<span class="line-number">135</span>
<span class="line-number">136</span>
<span class="line-number">137</span>
<span class="line-number">138</span>
<span class="line-number">139</span>
<span class="line-number">140</span>
<span class="line-number">141</span>
<span class="line-number">142</span>
<span class="line-number">143</span>
<span class="line-number">144</span>
<span class="line-number">145</span>
<span class="line-number">146</span>
<span class="line-number">147</span>
<span class="line-number">148</span>
<span class="line-number">149</span>
<span class="line-number">150</span>
<span class="line-number">151</span>
<span class="line-number">152</span>
<span class="line-number">153</span>
<span class="line-number">154</span>
<span class="line-number">155</span>
<span class="line-number">156</span>
<span class="line-number">157</span>
<span class="line-number">158</span>
</pre></td><td class="code"><pre><code class="c++"><span class="line"><span class="cp">#include &lt;stdio.h&gt;</span>
</span><span class="line"><span class="cp">#include &lt;string.h&gt;</span>
</span><span class="line"><span class="cp">#include &lt;stdlib.h&gt;</span>
</span><span class="line">
</span><span class="line"><span class="kt">char</span> <span class="n">dic</span><span class="p">[</span><span class="mi">10000</span><span class="p">][</span><span class="mi">16</span><span class="p">];</span>
</span><span class="line"><span class="kt">int</span> <span class="n">sorted</span><span class="p">[</span><span class="mi">10000</span><span class="p">][</span><span class="mi">2</span><span class="p">];</span>
</span><span class="line">
</span><span class="line"><span class="kt">int</span> <span class="n">check</span><span class="p">(</span><span class="kt">char</span> <span class="o">*</span><span class="n">s</span><span class="p">,</span> <span class="kt">char</span> <span class="o">*</span><span class="n">b</span><span class="p">,</span> <span class="kt">int</span> <span class="n">small</span><span class="p">);</span>
</span><span class="line">
</span><span class="line"><span class="kt">int</span> <span class="n">ncom</span><span class="p">(</span><span class="k">const</span> <span class="kt">void</span> <span class="o">*</span> <span class="n">p</span><span class="p">,</span> <span class="k">const</span> <span class="kt">void</span> <span class="o">*</span> <span class="n">q</span><span class="p">)</span>
</span><span class="line"><span class="p">{</span>
</span><span class="line">    <span class="k">return</span> <span class="o">*</span><span class="p">(</span><span class="kt">int</span> <span class="o">*</span><span class="p">)</span><span class="n">p</span> <span class="o">-</span> <span class="o">*</span><span class="p">(</span><span class="kt">int</span> <span class="o">*</span><span class="p">)</span><span class="n">q</span><span class="p">;</span>
</span><span class="line"><span class="p">}</span>
</span><span class="line">
</span><span class="line"><span class="kt">int</span> <span class="n">comp</span><span class="p">(</span><span class="k">const</span> <span class="kt">void</span> <span class="o">*</span> <span class="n">p</span><span class="p">,</span> <span class="k">const</span> <span class="kt">void</span> <span class="o">*</span> <span class="n">q</span><span class="p">)</span>
</span><span class="line"><span class="p">{</span>
</span><span class="line">    <span class="k">if</span> <span class="p">(((</span><span class="kt">int</span> <span class="o">*</span><span class="p">)</span><span class="n">p</span><span class="p">)[</span><span class="mi">1</span><span class="p">]</span> <span class="o">&lt;</span> <span class="p">((</span><span class="kt">int</span> <span class="o">*</span><span class="p">)</span><span class="n">q</span><span class="p">)[</span><span class="mi">1</span><span class="p">])</span> <span class="p">{</span>
</span><span class="line">        <span class="k">return</span> <span class="o">-</span><span class="mi">1</span><span class="p">;</span>
</span><span class="line">    <span class="p">}</span>
</span><span class="line">    <span class="k">else</span> <span class="k">if</span> <span class="p">(((</span><span class="kt">int</span> <span class="o">*</span><span class="p">)</span><span class="n">p</span><span class="p">)[</span><span class="mi">1</span><span class="p">]</span> <span class="o">==</span> <span class="p">((</span><span class="kt">int</span> <span class="o">*</span><span class="p">)</span><span class="n">q</span><span class="p">)[</span><span class="mi">1</span><span class="p">])</span> <span class="p">{</span>
</span><span class="line">        <span class="k">return</span> <span class="n">strcmp</span><span class="p">(</span><span class="n">dic</span><span class="p">[((</span><span class="kt">int</span> <span class="o">*</span><span class="p">)</span><span class="n">p</span><span class="p">)[</span><span class="mi">0</span><span class="p">]],</span> <span class="n">dic</span><span class="p">[((</span><span class="kt">int</span> <span class="o">*</span><span class="p">)</span><span class="n">q</span><span class="p">)[</span><span class="mi">0</span><span class="p">]]);</span>
</span><span class="line">    <span class="p">}</span>
</span><span class="line">    <span class="k">else</span> <span class="p">{</span>
</span><span class="line">        <span class="k">return</span> <span class="mi">1</span><span class="p">;</span>
</span><span class="line">    <span class="p">}</span>
</span><span class="line"><span class="p">}</span>
</span><span class="line">
</span><span class="line"><span class="kt">int</span> <span class="n">main</span><span class="p">(</span><span class="kt">int</span> <span class="n">argc</span><span class="p">,</span> <span class="kt">char</span> <span class="o">*</span> <span class="k">const</span> <span class="n">argv</span><span class="p">[])</span>
</span><span class="line"><span class="p">{</span>
</span><span class="line">    <span class="kt">int</span> <span class="n">i</span><span class="p">,</span> <span class="n">j</span><span class="p">;</span>
</span><span class="line">    <span class="kt">int</span> <span class="n">numdic</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class="line">
</span><span class="line">    <span class="kt">char</span> <span class="n">word</span><span class="p">[</span><span class="mi">16</span><span class="p">];</span>
</span><span class="line">    <span class="kt">int</span> <span class="n">lenword</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class="line">    <span class="kt">int</span> <span class="n">replace</span><span class="p">[</span><span class="mi">10000</span><span class="p">];</span>
</span><span class="line">    <span class="kt">int</span> <span class="n">t</span><span class="p">;</span>
</span><span class="line">    <span class="kt">int</span> <span class="n">count</span><span class="p">;</span>
</span><span class="line">    <span class="kt">int</span> <span class="n">first</span><span class="p">,</span> <span class="n">mid</span><span class="p">,</span> <span class="n">last</span><span class="p">;</span>
</span><span class="line">
</span><span class="line">    <span class="cm">/*Read the dict*/</span>
</span><span class="line">    <span class="k">while</span> <span class="p">(</span><span class="mi">1</span> <span class="o">==</span> <span class="mi">1</span><span class="p">)</span> <span class="p">{</span>
</span><span class="line">        <span class="n">scanf</span><span class="p">(</span><span class="s">&quot;%s&quot;</span><span class="p">,</span> <span class="n">dic</span><span class="p">[</span><span class="n">numdic</span><span class="p">]);</span>
</span><span class="line">        <span class="k">if</span> <span class="p">(</span><span class="n">dic</span><span class="p">[</span><span class="n">numdic</span><span class="p">][</span><span class="mi">0</span><span class="p">]</span> <span class="o">==</span> <span class="sc">&#39;#&#39;</span><span class="p">)</span> <span class="p">{</span>
</span><span class="line">            <span class="k">break</span><span class="p">;</span>
</span><span class="line">        <span class="p">}</span>
</span><span class="line">        <span class="n">replace</span><span class="p">[</span><span class="n">numdic</span><span class="p">]</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class="line">        <span class="n">sorted</span><span class="p">[</span><span class="n">numdic</span><span class="p">][</span><span class="mi">0</span><span class="p">]</span> <span class="o">=</span> <span class="n">numdic</span><span class="p">;</span>
</span><span class="line">        <span class="n">sorted</span><span class="p">[</span><span class="n">numdic</span><span class="p">][</span><span class="mi">1</span><span class="p">]</span> <span class="o">=</span> <span class="n">strlen</span><span class="p">(</span><span class="n">dic</span><span class="p">[</span><span class="n">numdic</span><span class="p">]);</span>
</span><span class="line">        <span class="n">numdic</span><span class="o">++</span><span class="p">;</span>
</span><span class="line">    <span class="p">}</span>
</span><span class="line">
</span><span class="line">    <span class="n">qsort</span><span class="p">(</span><span class="n">sorted</span><span class="p">,</span> <span class="n">numdic</span><span class="p">,</span> <span class="k">sizeof</span><span class="p">(</span><span class="kt">int</span><span class="p">)</span><span class="o">*</span><span class="mi">2</span><span class="p">,</span> <span class="n">comp</span><span class="p">);</span>
</span><span class="line">
</span><span class="line">    <span class="k">while</span> <span class="p">(</span><span class="mi">1</span> <span class="o">==</span> <span class="mi">1</span><span class="p">)</span> <span class="p">{</span>
</span><span class="line">        <span class="n">scanf</span><span class="p">(</span><span class="s">&quot;%s&quot;</span><span class="p">,</span> <span class="n">word</span><span class="p">);</span>
</span><span class="line">        <span class="k">if</span> <span class="p">(</span><span class="n">word</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="o">==</span> <span class="sc">&#39;#&#39;</span><span class="p">)</span> <span class="p">{</span>
</span><span class="line">            <span class="k">break</span><span class="p">;</span>
</span><span class="line">        <span class="p">}</span>
</span><span class="line">        <span class="n">printf</span><span class="p">(</span><span class="s">&quot;%s&quot;</span><span class="p">,</span> <span class="n">word</span><span class="p">);</span>
</span><span class="line">        <span class="n">lenword</span> <span class="o">=</span> <span class="n">strlen</span><span class="p">(</span><span class="n">word</span><span class="p">);</span>
</span><span class="line">        <span class="n">i</span> <span class="o">=</span> <span class="o">-</span><span class="mi">1</span><span class="p">;</span>
</span><span class="line">        <span class="k">while</span> <span class="p">(</span><span class="o">++</span><span class="n">i</span> <span class="o">&lt;</span> <span class="n">numdic</span> <span class="o">&amp;&amp;</span> <span class="n">sorted</span><span class="p">[</span><span class="n">i</span><span class="p">][</span><span class="mi">1</span><span class="p">]</span> <span class="o">&lt;</span> <span class="n">lenword</span><span class="p">);</span>
</span><span class="line">
</span><span class="line">        <span class="k">if</span> <span class="p">(</span><span class="n">i</span> <span class="o">&lt;</span> <span class="n">numdic</span><span class="p">)</span> <span class="p">{</span>
</span><span class="line">            <span class="n">first</span> <span class="o">=</span> <span class="n">i</span><span class="p">;</span>
</span><span class="line">            <span class="n">i</span><span class="o">--</span><span class="p">;</span>
</span><span class="line">            <span class="k">while</span> <span class="p">(</span><span class="o">++</span><span class="n">i</span> <span class="o">&lt;</span> <span class="n">numdic</span> <span class="o">&amp;&amp;</span> <span class="n">sorted</span><span class="p">[</span><span class="n">i</span><span class="p">][</span><span class="mi">1</span><span class="p">]</span> <span class="o">==</span> <span class="n">lenword</span><span class="p">);</span>
</span><span class="line">            <span class="n">last</span> <span class="o">=</span> <span class="n">i</span><span class="o">-</span><span class="mi">1</span><span class="p">;</span>
</span><span class="line">            <span class="n">mid</span> <span class="o">=</span> <span class="p">(</span><span class="n">last</span> <span class="o">-</span> <span class="n">first</span><span class="p">)</span><span class="o">/</span><span class="mi">2</span><span class="p">;</span>
</span><span class="line">            <span class="n">j</span> <span class="o">=</span> <span class="o">-</span><span class="mi">1</span><span class="p">;</span>
</span><span class="line">            <span class="k">while</span> <span class="p">(</span><span class="mi">1</span> <span class="o">==</span> <span class="mi">1</span><span class="p">)</span> <span class="p">{</span>
</span><span class="line">                <span class="k">if</span> <span class="p">(</span><span class="n">last</span> <span class="o">&lt;</span> <span class="n">first</span><span class="p">)</span> <span class="p">{</span>
</span><span class="line">                    <span class="k">break</span><span class="p">;</span>
</span><span class="line">                <span class="p">}</span>
</span><span class="line">                <span class="n">mid</span> <span class="o">=</span> <span class="n">first</span> <span class="o">+</span> <span class="p">(</span><span class="n">last</span> <span class="o">-</span> <span class="n">first</span><span class="p">)</span><span class="o">/</span><span class="mi">2</span><span class="p">;</span>
</span><span class="line">                <span class="n">j</span> <span class="o">=</span> <span class="n">strcmp</span><span class="p">(</span><span class="n">dic</span><span class="p">[</span><span class="n">sorted</span><span class="p">[</span><span class="n">mid</span><span class="p">][</span><span class="mi">0</span><span class="p">]],</span> <span class="n">word</span><span class="p">);</span>
</span><span class="line">                <span class="k">if</span> <span class="p">(</span><span class="n">j</span> <span class="o">==</span> <span class="mi">0</span><span class="p">)</span> <span class="p">{</span>
</span><span class="line">                    <span class="n">printf</span><span class="p">(</span><span class="s">&quot; is correct</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">);</span>
</span><span class="line">                    <span class="k">break</span><span class="p">;</span>
</span><span class="line">                <span class="p">}</span>
</span><span class="line">                <span class="k">else</span> <span class="k">if</span> <span class="p">(</span><span class="n">j</span> <span class="o">&lt;</span> <span class="mi">0</span><span class="p">)</span> <span class="p">{</span>
</span><span class="line">                    <span class="n">first</span> <span class="o">=</span> <span class="n">mid</span><span class="o">+</span><span class="mi">1</span><span class="p">;</span>
</span><span class="line">                <span class="p">}</span>
</span><span class="line">                <span class="k">else</span> <span class="p">{</span>
</span><span class="line">                    <span class="n">last</span> <span class="o">=</span> <span class="n">mid</span><span class="o">-</span><span class="mi">1</span><span class="p">;</span>
</span><span class="line">                <span class="p">}</span>
</span><span class="line">            <span class="p">}</span>
</span><span class="line">            <span class="k">if</span> <span class="p">(</span><span class="n">j</span> <span class="o">==</span> <span class="mi">0</span><span class="p">)</span> <span class="p">{</span>
</span><span class="line">                <span class="k">continue</span><span class="p">;</span>
</span><span class="line">            <span class="p">}</span>
</span><span class="line">        <span class="p">}</span>
</span><span class="line">        <span class="n">count</span> <span class="o">=</span> <span class="o">-</span><span class="mi">1</span><span class="p">;</span>
</span><span class="line">        <span class="n">i</span> <span class="o">=</span> <span class="o">-</span><span class="mi">1</span><span class="p">;</span>
</span><span class="line">        <span class="n">t</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class="line">        <span class="k">while</span> <span class="p">(</span><span class="o">++</span><span class="n">i</span> <span class="o">&lt;</span> <span class="n">numdic</span> <span class="o">&amp;&amp;</span> <span class="n">sorted</span><span class="p">[</span><span class="n">i</span><span class="p">][</span><span class="mi">1</span><span class="p">]</span> <span class="o">&lt;</span> <span class="n">lenword</span><span class="o">-</span><span class="mi">1</span><span class="p">);</span>
</span><span class="line">        <span class="k">while</span> <span class="p">(</span><span class="n">i</span> <span class="o">&lt;</span> <span class="n">numdic</span><span class="p">)</span> <span class="p">{</span>
</span><span class="line">            <span class="k">if</span> <span class="p">(</span><span class="n">lenword</span><span class="o">-</span><span class="mi">1</span> <span class="o">==</span> <span class="n">sorted</span><span class="p">[</span><span class="n">i</span><span class="p">][</span><span class="mi">1</span><span class="p">])</span> <span class="p">{</span>
</span><span class="line">                <span class="k">if</span> <span class="p">(</span><span class="n">check</span><span class="p">(</span><span class="n">dic</span><span class="p">[</span><span class="n">sorted</span><span class="p">[</span><span class="n">i</span><span class="p">][</span><span class="mi">0</span><span class="p">]],</span> <span class="n">word</span><span class="p">,</span> <span class="n">lenword</span><span class="o">-</span><span class="mi">1</span><span class="p">)</span> <span class="o">==</span> <span class="mi">1</span><span class="p">)</span> <span class="p">{</span>
</span><span class="line">                    <span class="n">replace</span><span class="p">[</span><span class="n">t</span><span class="o">++</span><span class="p">]</span> <span class="o">=</span> <span class="n">sorted</span><span class="p">[</span><span class="n">i</span><span class="p">][</span><span class="mi">0</span><span class="p">];</span>
</span><span class="line">                <span class="p">}</span>
</span><span class="line">            <span class="p">}</span>
</span><span class="line">            <span class="k">else</span> <span class="k">if</span> <span class="p">(</span><span class="n">lenword</span> <span class="o">==</span> <span class="n">sorted</span><span class="p">[</span><span class="n">i</span><span class="p">][</span><span class="mi">1</span><span class="p">])</span> <span class="p">{</span>
</span><span class="line">                <span class="n">count</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class="line">                <span class="k">for</span> <span class="p">(</span><span class="n">j</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">j</span> <span class="o">&lt;</span> <span class="n">lenword</span><span class="p">;</span> <span class="n">j</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
</span><span class="line">                    <span class="k">if</span> <span class="p">(</span><span class="n">word</span><span class="p">[</span><span class="n">j</span><span class="p">]</span> <span class="o">!=</span> <span class="n">dic</span><span class="p">[</span><span class="n">sorted</span><span class="p">[</span><span class="n">i</span><span class="p">][</span><span class="mi">0</span><span class="p">]][</span><span class="n">j</span><span class="p">])</span> <span class="p">{</span>
</span><span class="line">                        <span class="n">count</span><span class="o">++</span><span class="p">;</span>
</span><span class="line">                    <span class="p">}</span>
</span><span class="line">                <span class="p">}</span>
</span><span class="line">                <span class="k">if</span> <span class="p">(</span><span class="n">count</span> <span class="o">==</span> <span class="mi">1</span><span class="p">){</span>
</span><span class="line">                    <span class="n">replace</span><span class="p">[</span><span class="n">t</span><span class="o">++</span><span class="p">]</span> <span class="o">=</span> <span class="n">sorted</span><span class="p">[</span><span class="n">i</span><span class="p">][</span><span class="mi">0</span><span class="p">];</span>
</span><span class="line">                <span class="p">}</span>
</span><span class="line">            <span class="p">}</span>
</span><span class="line">            <span class="k">else</span> <span class="k">if</span> <span class="p">(</span><span class="n">lenword</span><span class="o">+</span><span class="mi">1</span> <span class="o">==</span> <span class="n">sorted</span><span class="p">[</span><span class="n">i</span><span class="p">][</span><span class="mi">1</span><span class="p">])</span> <span class="p">{</span>
</span><span class="line">                <span class="k">if</span> <span class="p">(</span><span class="n">check</span><span class="p">(</span><span class="n">word</span><span class="p">,</span> <span class="n">dic</span><span class="p">[</span><span class="n">sorted</span><span class="p">[</span><span class="n">i</span><span class="p">][</span><span class="mi">0</span><span class="p">]],</span> <span class="n">lenword</span><span class="p">)</span> <span class="o">==</span> <span class="mi">1</span><span class="p">)</span> <span class="p">{</span>
</span><span class="line">                    <span class="n">replace</span><span class="p">[</span><span class="n">t</span><span class="o">++</span><span class="p">]</span> <span class="o">=</span> <span class="n">sorted</span><span class="p">[</span><span class="n">i</span><span class="p">][</span><span class="mi">0</span><span class="p">];</span>
</span><span class="line">                <span class="p">}</span>
</span><span class="line">            <span class="p">}</span>
</span><span class="line">            <span class="k">else</span> <span class="p">{</span>
</span><span class="line">                <span class="k">break</span><span class="p">;</span>
</span><span class="line">            <span class="p">}</span>
</span><span class="line">            <span class="n">i</span><span class="o">++</span><span class="p">;</span>
</span><span class="line">        <span class="p">}</span>
</span><span class="line">        <span class="k">if</span> <span class="p">(</span><span class="n">count</span> <span class="o">!=</span> <span class="mi">0</span><span class="p">)</span> <span class="p">{</span>
</span><span class="line">            <span class="n">qsort</span><span class="p">(</span><span class="n">replace</span><span class="p">,</span> <span class="n">t</span><span class="p">,</span> <span class="k">sizeof</span><span class="p">(</span><span class="kt">int</span><span class="p">),</span> <span class="n">ncom</span><span class="p">);</span>
</span><span class="line">            <span class="n">printf</span><span class="p">(</span><span class="s">&quot;:&quot;</span><span class="p">);</span>
</span><span class="line">            <span class="n">j</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class="line">            <span class="k">while</span> <span class="p">(</span><span class="n">j</span> <span class="o">&lt;</span> <span class="n">t</span><span class="p">)</span> <span class="p">{</span>
</span><span class="line">                <span class="n">printf</span><span class="p">(</span><span class="s">&quot; %s&quot;</span><span class="p">,</span> <span class="n">dic</span><span class="p">[</span><span class="n">replace</span><span class="p">[</span><span class="n">j</span><span class="o">++</span><span class="p">]]);</span>
</span><span class="line">            <span class="p">}</span>
</span><span class="line">            <span class="n">printf</span><span class="p">(</span><span class="s">&quot;</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">);</span>
</span><span class="line">        <span class="p">}</span>
</span><span class="line">    <span class="p">}</span>
</span><span class="line">    <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
</span><span class="line"><span class="p">}</span>
</span><span class="line">
</span><span class="line">
</span><span class="line"><span class="kt">int</span> <span class="n">check</span><span class="p">(</span><span class="kt">char</span> <span class="o">*</span><span class="n">s</span><span class="p">,</span> <span class="kt">char</span> <span class="o">*</span><span class="n">b</span><span class="p">,</span> <span class="kt">int</span> <span class="n">small</span><span class="p">)</span>
</span><span class="line"><span class="p">{</span>
</span><span class="line">    <span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">,</span> <span class="n">j</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class="line">
</span><span class="line">    <span class="k">while</span> <span class="p">(</span><span class="n">s</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">==</span> <span class="n">b</span><span class="p">[</span><span class="n">j</span><span class="p">])</span> <span class="p">{</span>
</span><span class="line">        <span class="n">i</span><span class="o">++</span><span class="p">;</span>
</span><span class="line">        <span class="n">j</span><span class="o">++</span><span class="p">;</span>
</span><span class="line">        <span class="k">if</span> <span class="p">(</span><span class="n">i</span> <span class="o">&gt;=</span> <span class="n">small</span><span class="p">)</span> <span class="p">{</span>
</span><span class="line">            <span class="k">return</span> <span class="mi">1</span><span class="p">;</span>
</span><span class="line">        <span class="p">}</span>
</span><span class="line">    <span class="p">}</span>
</span><span class="line">    <span class="n">j</span><span class="o">++</span><span class="p">;</span>
</span><span class="line">    <span class="k">while</span> <span class="p">(</span><span class="n">s</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">==</span> <span class="n">b</span><span class="p">[</span><span class="n">j</span><span class="p">])</span> <span class="p">{</span>
</span><span class="line">        <span class="n">i</span><span class="o">++</span><span class="p">;</span>
</span><span class="line">        <span class="n">j</span><span class="o">++</span><span class="p">;</span>
</span><span class="line">        <span class="k">if</span> <span class="p">(</span><span class="n">i</span> <span class="o">&gt;=</span> <span class="n">small</span><span class="p">)</span> <span class="p">{</span>
</span><span class="line">            <span class="k">return</span> <span class="mi">1</span><span class="p">;</span>
</span><span class="line">        <span class="p">}</span>
</span><span class="line">    <span class="p">}</span>
</span><span class="line">
</span><span class="line">    <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
</span><span class="line"><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Hello World]]></title>
    <link href="http://iceout.github.com/blog/2012/04/21/hello-world/"/>
    <updated>2012-04-21T01:31:00+08:00</updated>
    <id>http://iceout.github.com/blog/2012/04/21/hello-world</id>
    <content type="html"><![CDATA[<h1 id="h1">h1</h1>

<h2 id="h2">h2</h2>

<h3 id="h3">h3</h3>

<h2 id="latex">Latex</h2>

<p><code>$$E = mc^2$$</code>的结果<script type="math/tex">E = mc^2</script></p>

<p><code>\\(E=mc^2\\)</code>的结果\(E=mc^2\)</p>

<h2 id="section">图片</h2>
<p><img src="http://iceout.github.com/uploads/Screenshot2.png" alt="octopress" title="God bless me!" />
<img class="center" src="http://iceout.github.com/uploads/Screenshot2.png" title="world peace #2" />
left center right, center does not work.</p>

<h2 id="c">C</h2>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span>hello </span><a href="http://iceout.github.com/blog/2012/04/21/hello-world/">link</a></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
</pre></td><td class="code"><pre><code class="c++"><span class="line"><span class="kt">int</span> <span class="n">main</span><span class="p">(</span><span class="kt">int</span> <span class="n">argc</span><span class="p">,</span> <span class="kt">char</span> <span class="o">*</span> <span class="k">const</span> <span class="n">argv</span><span class="p">[])</span>
</span><span class="line"><span class="p">{</span>
</span><span class="line">    <span class="n">printf</span><span class="p">(</span><span class="s">&quot;Hello, World!</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">);</span>
</span><span class="line">    <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
</span><span class="line"><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<h2 id="python">Python</h2>

<div class="bogus-wrapper"><notextile><figure class="code"> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="python"><span class="line"><span class="k">print</span> <span class="s">&#39;Hello, World!&#39;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<h2 id="java">Java</h2>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span /></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
</pre></td><td class="code"><pre><code class="java"><span class="line"><span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="n">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
</span><span class="line">	<span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&quot;Hello, World!&quot;</span><span class="o">);</span>
</span><span class="line"><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>
]]></content>
  </entry>
  
</feed>

<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: C | iceout's blog]]></title>
  <link href="http://iceout.github.com/blog/categories/c/atom.xml" rel="self"/>
  <link href="http://iceout.github.com/"/>
  <updated>2012-08-29T22:23:57+08:00</updated>
  <id>http://iceout.github.com/</id>
  <author>
    <name><![CDATA[iceout]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Expert C Programming 笔记]]></title>
    <link href="http://iceout.github.com/blog/2012/08/03/expert-c-programming-note/"/>
    <updated>2012-08-03T13:48:00+08:00</updated>
    <id>http://iceout.github.com/blog/2012/08/03/expert-c-programming-note</id>
    <content type="html"><![CDATA[<h2 id="chapter-2">Chapter 2:</h2>
<p>分析编程语言的缺陷的一种方法是把缺陷分为三类:多做之过，少作之过和误做之过。</p>

<h3 id="section">1. 多做之过</h3>
<ol>
  <li>switch的case不加break就会一次执行下去。</li>
  <li>const修饰的变量并不是真正的常量，表现之一是无法在swith里当作case使用。</li>
  <li>相邻的字符串常量自动合并为一个字符串。</li>
  <li>太多的全局可见性。</li>
</ol>

<!-- more -->

<h3 id="section-1">2. 误做之过</h3>
<ol>
  <li>
    <p>许多符号（甚至是关键字）在不同的上下文环境中有不同的意义。</p>

    <blockquote>
      <p><code>static</code></p>

      <pre><code>    修饰函数，表示该函数只对本文件可见
    在函数内部，表示该变量在各个调用间一直保持延续性
</code></pre>

      <p><code>extern</code></p>

      <pre><code>    用于变量，不是它在其他地方定义
    用于函数定义，表示全局可见（属于冗余的）
</code></pre>

      <p><code>void</code></p>

      <pre><code>    作为函数的返回类型，表示不返回任何值
    在指针声明中，表示通用指针类型
    位于参数列表中，表示没有参数
</code></pre>

      <p><code>()</code></p>

      <pre><code>    在函数定义中，包围形式参数
    调用一个函数
    改变表达式的运算次序
    强制类型转换
    定义带参数的宏
    包围sizeof操作符的操作数（如果它是类型名）
</code></pre>
    </blockquote>
  </li>
  <li>
    <p>运算符优先级</p>
  </li>
</ol>

<p><img src="/uploads/PrecedenceofC.png" alt="Precedence of c operator" /></p>

<h3 id="section-2">3. 少做之过</h3>
<ol>
  <li>参数的解析</li>
  <li>注释</li>
  <li>自动变量的内存分配</li>
</ol>

<h2 id="chapter-3">Chapter 3:</h2>
<p>C语言的声明</p>

<p>如果const和/或volatile关键字的后面紧跟类型说明符,那么它作用于类型说明符.其他情况下const和/或volatile关键字作用于它左边紧邻的指针星号.</p>

<ol>
  <li>找到最左边的标识符,表示”标识符是”</li>
  <li>查看右边的下一个字符,
    <ol>
      <li>如果是’[‘,到’]‘为止,表示”…的数组”</li>
      <li>如果是’(‘,到’)’为止,表示”返回…的函数”</li>
    </ol>
  </li>
  <li>标识符左边的符号是’(‘,它与对应的’)’之间的内容为我们已经处理的表达式.跳转到第二步.</li>
  <li>如果左边的符号为const,volatile或*,继续向左读取符号,直到所读取的符号不是那三个之一.然后跳转到第三步.
    <ol>
      <li>const表示”read-only”</li>
      <li>volatile表示”volatile”</li>
      <li>*表示”指向…的指针”</li>
    </ol>
  </li>
  <li>剩下的符号为基本类型.</li>
</ol>

<h2 id="chapter-4">Chapter 4:</h2>
<p>数组和指针</p>

<p>左值:’l-value’(for ‘left-hand-side’ or ‘locator’ value),表示地址,编译器会分配每个变量一个地址,即左值.
右值:’r-value’(for ‘right-hand-side’),表示the value stored in a variable,运行时变量的右值才知道.</p>

<p>‘modifiable l-value’:可修改的左值.数组名为左值但不可修改,不能出现在赋值符左边.</p>

<pre><code>Differences Between Arrays and Pointers
Pointer                                 Array

Holds the address of data               Holds data

Data is accessed indirectly,            Data is accessed directly, 
so you first retrieve the               so for a[i] you simply retrieve
contents of the pointer, load           the contents of the
that as an address (call it "L"),       location i units past a.
then retrieve its contents.
If the pointer has a subscript 
[i] you instead retrieve the 
contents of the location 'i' 
units past "L"

Commonly used for dynamic data          Commonly used for holding a 
structures                              fixed number of elements of the
                                        same type of data

Commonly used with malloc(), free()     Implicitly allocated and 
                                        deallocated

Typically points to anonymous data      Is a named variable in its own  
                                        right
</code></pre>

<p>定义指针时编译器并不为指针所指的对象分配空间,只是分配指针本身的空间,除非在定义指针时赋给指针一个字符串常量进行初始化,只有是字符串常量时才如此.</p>

<h2 id="chapter-5">Chapter 5:</h2>
<p>linking</p>

<p>书中这一章不是以gcc为例子,所以没有实验,只是粗略的看了一下.</p>

<h2 id="chapter-6">Chapter 6:</h2>
<p>运行时数据结构</p>

<p>linux下可执行文件的第一个字节依然是7F,第二至四字节依然是ELF.</p>

<p>使用size可以查看可执行文件的各个section大小.</p>

<p>data段存储初始过的全局和静态变量,bss段保存没有值的变量,text段保存可执行命令(声明变量不算命令,声明变量并初始化算命令…).</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='cpp'><span class='line'><span class="cp">#include &lt;stdio.h&gt;</span>
</span><span class='line'><span class="cm">/*int num[1000]={2,45};*/</span>
</span><span class='line'><span class="cm">/*int num[1000]={2,45};*/</span>
</span><span class='line'><span class="kt">int</span> <span class="n">main</span><span class="p">(</span><span class="kt">int</span> <span class="n">argc</span><span class="p">,</span> <span class="kt">char</span> <span class="o">*</span> <span class="k">const</span> <span class="n">argv</span><span class="p">[])</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="cm">/*int mm[1000]={98,12};*/</span>
</span><span class='line'>    <span class="cm">/*int mm[1000];*/</span>
</span><span class='line'>    <span class="cm">/*printf(&quot;%p\n&quot;, num);*/</span>
</span><span class='line'>    <span class="n">printf</span><span class="p">(</span><span class="s">&quot;hello</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">);</span>
</span><span class='line'>    <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></stdio.h></p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>text	   data	    bss	    dec	    hex	filename
</span><span class='line'>1034	    288	      4	   1326	    52e	a.out</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class='cpp'><span class='line'><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="err">#</span><span class="n">include</span> <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="n">stdio</span><span class="p">.</span><span class="n">h</span><span class="o">&amp;</span><span class="n">gt</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="kt">int</span> <span class="n">num</span><span class="p">[</span><span class="mi">1000</span><span class="p">];</span>
</span><span class='line'><span class="cm">/*int num[1000]={2,45};*/</span>
</span><span class='line'><span class="kt">int</span> <span class="n">main</span><span class="p">(</span><span class="kt">int</span> <span class="n">argc</span><span class="p">,</span> <span class="kt">char</span> <span class="o">*</span> <span class="k">const</span> <span class="n">argv</span><span class="p">[])</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="cm">/*int mm[1000]={98,12};*/</span>
</span><span class='line'>    <span class="cm">/*int mm[1000];*/</span>
</span><span class='line'>    <span class="cm">/*printf(&quot;%p\n&quot;, num);*/</span>
</span><span class='line'>    <span class="n">printf</span><span class="p">(</span><span class="s">&quot;hello</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">);</span>
</span><span class='line'>    <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>text	   data	    bss	    dec	    hex	filename&lt;br />
</span><span class='line'>1034	    288	   4032	   5354	   14ea	a.out</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='cpp'><span class='line'><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="err">#</span><span class="n">include</span> <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="n">stdio</span><span class="p">.</span><span class="n">h</span><span class="o">&amp;</span><span class="n">gt</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="kt">int</span> <span class="n">num</span><span class="p">[</span><span class="mi">1000</span><span class="p">]</span><span class="o">=</span><span class="p">{</span><span class="mi">2</span><span class="p">,</span><span class="mi">45</span><span class="p">};</span>
</span><span class='line'><span class="kt">int</span> <span class="n">main</span><span class="p">(</span><span class="kt">int</span> <span class="n">argc</span><span class="p">,</span> <span class="kt">char</span> <span class="o">*</span> <span class="k">const</span> <span class="n">argv</span><span class="p">[])</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="cm">/*int mm[1000]={98,12};*/</span>
</span><span class='line'>    <span class="cm">/*int mm[1000];*/</span>
</span><span class='line'>    <span class="cm">/*printf(&quot;%p\n&quot;, num);*/</span>
</span><span class='line'>    <span class="n">printf</span><span class="p">(</span><span class="s">&quot;hello</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">);</span>
</span><span class='line'>    <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>
</code></pre>

<p><div class='bogus-wrapper'><notextile><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>text	   data	    bss	    dec	    hex	filename&lt;br />
</span><span class='line'>1034	   4312	      4	   5350	   14e6	a.out</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='cpp'><span class='line'><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="err">#</span><span class="n">include</span> <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="n">stdio</span><span class="p">.</span><span class="n">h</span><span class="o">&amp;</span><span class="n">gt</span><span class="p">;</span>
</span><span class='line'><span class="kt">int</span> <span class="n">num</span><span class="p">[</span><span class="mi">1000</span><span class="p">]</span><span class="o">=</span><span class="p">{</span><span class="mi">2</span><span class="p">,</span><span class="mi">45</span><span class="p">};</span>
</span><span class='line'><span class="kt">int</span> <span class="n">main</span><span class="p">(</span><span class="kt">int</span> <span class="n">argc</span><span class="p">,</span> <span class="kt">char</span> <span class="o">*</span> <span class="k">const</span> <span class="n">argv</span><span class="p">[])</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="cm">/*int mm[1000]={98,12};*/</span>
</span><span class='line'>    <span class="kt">int</span> <span class="n">mm</span><span class="p">[</span><span class="mi">1000</span><span class="p">];</span>
</span><span class='line'>    <span class="cm">/*printf(&quot;%p\n&quot;, num);*/</span>
</span><span class='line'>    <span class="n">printf</span><span class="p">(</span><span class="s">&quot;hello</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">);</span>
</span><span class='line'>    <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>
</code></pre>

<p><div class='bogus-wrapper'><notextile><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>text    data    bss     dec	   hex    filename
</span><span class='line'>1034    4312      4    5350   14e6	  a.out</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='cpp'><span class='line'><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="err">#</span><span class="n">include</span> <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="n">stdio</span><span class="p">.</span><span class="n">h</span><span class="o">&amp;</span><span class="n">gt</span><span class="p">;</span>
</span><span class='line'><span class="kt">int</span> <span class="n">num</span><span class="p">[</span><span class="mi">1000</span><span class="p">]</span><span class="o">=</span><span class="p">{</span><span class="mi">2</span><span class="p">,</span><span class="mi">45</span><span class="p">};</span>
</span><span class='line'><span class="kt">int</span> <span class="n">main</span><span class="p">(</span><span class="kt">int</span> <span class="n">argc</span><span class="p">,</span> <span class="kt">char</span> <span class="o">*</span> <span class="k">const</span> <span class="n">argv</span><span class="p">[])</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="kt">int</span> <span class="n">mm</span><span class="p">[</span><span class="mi">1000</span><span class="p">]</span><span class="o">=</span><span class="p">{</span><span class="mi">98</span><span class="p">,</span><span class="mi">12</span><span class="p">};</span>
</span><span class='line'>    <span class="cm">/*printf(&quot;%p\n&quot;, num);*/</span>
</span><span class='line'>    <span class="n">printf</span><span class="p">(</span><span class="s">&quot;hello</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">);</span>
</span><span class='line'>    <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>
</code></pre>

<p><div class='bogus-wrapper'><notextile><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>text	   data	    bss	    dec	    hex	filename&lt;br />
</span><span class='line'>1090	   4312	      4	   5406	   151e	a.out</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<h3 id="section-3">可执行程序各个段在内存中的布局</h3>
<p><img src="/uploads/segment_in_memory.png" alt="how the segments of an executable are laid out in memory" /></p>

<p>连接器将各个段映射到内存中时可以设置不同的属性,如read-and-execute-only,read-write-no-execute,read-only等.data段和BSS段通称数据区.注意,最底部的虚拟地址未被映射,它在进程的地址空间内,但是并没有赋予物理地址,所以不能引用.
另外程序还需要堆(heap),使用malloc()等动态分配内存.</p>

<p>栈主要有三个用途:
1. 函数内部的局部变量(c术语automatic variables).
2. 函数调用时候的维护信息.这些信息称作stack frame,或precedure activation recored.
3. 栈也是一个临时储存区域.使用alloca()获得的存储区域就在栈中.</p>

<p>stack frame的结构(回头可以参看一下csapp)
|——————|
| local variables  |
|——————|
|   arguments      |
|     ……       |
|     ……       |
|   arguments      |
|——————|
|   static link    |
|——————|
|     ptr to       |
|  previous frame  |
|——————|
|   return address |
|——————|</p>

<p>自动变量/局部变量在stack中分配,所以当函数结束时就不存在了.而static变量储存在数据段中,生命周期与程序一样长.</p>

<p>stack frame可能并不位于stack中.</p>

<p><code>setjmp(jmp_buf j)</code>:使用变量j记录现在的位置,返回0.
<code>longjmp(jmp_buf j, int i)</code>:回到j所记录的位置,好像是从<code>setjmp()</code>返回一样,返回值是i.</p>

<h2 id="chapter-7">Chapter 7:</h2>

<h3 id="x86">7.2 80x86内存模型</h3>

<p>8086内存地址形成的经过:取得段寄存器的值,左移4位,扩展为20位的,然后加上偏移地址,得到最终地址.</p>

<h3 id="section-4">7.5 数据段和堆</h3>

<table>
  <thead>
    <tr>
      <th>stack segment</th>
      <th>(data local to functions)</th>
    </tr>
    <tr>
      <th>……</th>
      <th> </th>
    </tr>
    <tr>
      <th>……</th>
      <th> </th>
    </tr>
    <tr>
      <th>……</th>
      <th> </th>
    </tr>
    <tr>
      <th>……</th>
      <th> </th>
    </tr>
    <tr>
      <th>——————</th>
      <th>— the break</th>
    </tr>
    <tr>
      <th>the heap</th>
      <th>(used for malloc())</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>BSS segment</td>
      <td> </td>
    </tr>
    <tr>
      <td> </td>
      <td> </td>
    </tr>
    <tr>
      <td> </td>
      <td> </td>
    </tr>
    <tr>
      <td>data segment</td>
      <td> </td>
    </tr>
  </tbody>
  <tbody>
    <tr>
      <td>text segment</td>
      <td> </td>
    </tr>
  </tbody>
</table>

<p><code>calloc</code>和<code>malloc</code>的区别是<code>calloc</code>会把申请的内存清零.</p>

<p><code>malloc</code>所分配的内存比申请的内存大,因为需要额外的空间记录管理信息(参见APUE7.8章),而且一般<code>malloc</code>采用的是__simple power of two free list__内存管理机制,获得的内存大小是<script type="math/tex">2^n</script>.</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='cpp'><span class='line'><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="n">malloc</span><span class="p">(</span><span class="n">X</span><span class="p">)</span><span class="o">:</span> <span class="n">size</span> <span class="o">=</span> <span class="n">roundup</span><span class="p">(</span><span class="n">X</span> <span class="o">+</span> <span class="k">sizeof</span><span class="p">(</span><span class="n">header</span><span class="p">))</span>
</span><span class='line'><span class="n">roundup</span><span class="p">(</span><span class="n">Y</span><span class="p">)</span> <span class="o">=</span> <span class="mi">2</span><span class="o">^</span><span class="n">n</span><span class="p">,</span> <span class="n">where</span> <span class="mi">2</span><span class="o">^</span><span class="p">(</span><span class="n">n</span><span class="o">-</span><span class="mi">1</span><span class="p">)</span> <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span> <span class="n">Y</span> <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="o">=</span> <span class="mi">2</span><span class="o">^</span><span class="n">n</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>堆的末端由一个被称为break的指针标识,当需要更多内存时,可以调用brk和sbrk移动break指针.
###7.6 内存泄漏</p>

<p>如何检查内存泄漏:
1. 先看看有多少交换空间</p>

<pre><code>cat /proc/swaps
free
</code></pre>

<ol>
  <li>
    <p>查看某个进程的内存</p>

    <p>ps -lu username</p>
  </li>
</ol>

<h3 id="section-5">7.7</h3>
<p>如何在一个链表中释放元素:用一个临时变量储存下一个元素的地址.</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='cpp'><span class='line'><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="k">struct</span> <span class="n">node</span> <span class="o">*</span><span class="n">p</span><span class="p">,</span> <span class="o">*</span><span class="n">start</span><span class="p">,</span> <span class="o">*</span><span class="n">tmp</span><span class="p">;</span>
</span><span class='line'><span class="k">for</span> <span class="p">(</span><span class="n">p</span><span class="o">=</span><span class="n">start</span><span class="p">;</span> <span class="n">p</span><span class="p">;</span> <span class="n">p</span><span class="o">=</span><span class="n">tmp</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">tmp</span> <span class="o">=</span> <span class="n">p</span><span class="o">-&amp;</span><span class="n">gt</span><span class="p">;</span><span class="n">next</span><span class="p">;</span>
</span><span class='line'>    <span class="n">free</span><span class="p">(</span><span class="n">p</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>信号处理:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
</pre></td><td class='code'><pre><code class='cpp'><span class='line'><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="err">#</span><span class="n">include</span> <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="n">stdio</span><span class="p">.</span><span class="n">h</span><span class="o">&amp;</span><span class="n">gt</span><span class="p">;</span>
</span><span class='line'><span class="cp">#include &amp;lt;signal.h&amp;gt;</span>
</span><span class='line'><span class="cp">#include &amp;lt;setjmp.h&amp;gt;</span>
</span><span class='line'>
</span><span class='line'><span class="n">jmp_buf</span> <span class="n">buf</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="kt">void</span> <span class="n">handler</span><span class="p">(</span><span class="kt">int</span> <span class="n">s</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="n">s</span> <span class="o">==</span> <span class="n">SIGSEGV</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">printf</span><span class="p">(</span><span class="s">&quot; segmentation violation signal</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">);</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="n">s</span> <span class="o">==</span> <span class="n">SIGILL</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">printf</span><span class="p">(</span><span class="s">&quot; now illegal instruction signal</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">);</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="n">s</span> <span class="o">==</span> <span class="n">SIGINT</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">printf</span><span class="p">(</span><span class="s">&quot; now SIGINT signal</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">);</span>
</span><span class='line'>        <span class="n">longjmp</span><span class="p">(</span><span class="n">buf</span><span class="p">,</span><span class="mi">1</span><span class="p">);</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kt">int</span> <span class="n">main</span><span class="p">(</span><span class="kt">int</span> <span class="n">argc</span><span class="p">,</span> <span class="kt">char</span> <span class="o">*</span> <span class="k">const</span> <span class="n">argv</span><span class="p">[])</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="cm">/*signal(SIGSEGV, handler);*/</span>
</span><span class='line'>    <span class="cm">/*signal(SIGILL, handler);*/</span>
</span><span class='line'>    <span class="n">signal</span><span class="p">(</span><span class="n">SIGINT</span><span class="p">,</span> <span class="n">handler</span><span class="p">);</span>
</span><span class='line'>    <span class="k">if</span><span class="p">(</span><span class="n">setjmp</span><span class="p">(</span><span class="n">buf</span><span class="p">))</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">printf</span><span class="p">(</span><span class="s">&quot;back in main</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">);</span>
</span><span class='line'>        <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">printf</span><span class="p">(</span><span class="s">&quot;first time</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">);</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="k">while</span><span class="p">(</span><span class="mi">1</span> <span class="o">==</span> <span class="mi">1</span><span class="p">);</span>
</span><span class='line'>    <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<h2 id="chapter-8">Chapter 8</h2>

<h3 id="making-a-glyph-from-bit-patterns">Making a Glyph from Bit Patterns</h3>

<p>一个很形象的方法,还可以当作秒表.</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
</pre></td><td class='code'><pre><code class='cpp'><span class='line'><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="err">#</span><span class="n">define</span> <span class="n">X</span> <span class="p">)</span><span class="o">*</span><span class="mi">2</span><span class="o">+</span><span class="mi">1</span>
</span><span class='line'><span class="cp">#define _ )*2</span>
</span><span class='line'><span class="cp">#define s ((((((((((((((((0 </span><span class="cm">/* For building glyphs 16 bits</span>
</span><span class='line'><span class="cm">wide */</span><span class="cp"></span>
</span><span class='line'><span class="k">static</span> <span class="kt">unsigned</span> <span class="kt">short</span> <span class="n">stopwatch</span><span class="p">[]</span> <span class="o">=</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'><span class="n">s</span> <span class="n">_</span> <span class="n">_</span> <span class="n">_</span> <span class="n">_</span> <span class="n">_</span> <span class="n">X</span> <span class="n">X</span> <span class="n">X</span> <span class="n">X</span> <span class="n">X</span> <span class="n">_</span> <span class="n">_</span> <span class="n">_</span> <span class="n">X</span> <span class="n">X</span> <span class="n">_</span> <span class="p">,</span>
</span><span class='line'><span class="n">s</span> <span class="n">_</span> <span class="n">_</span> <span class="n">_</span> <span class="n">X</span> <span class="n">X</span> <span class="n">X</span> <span class="n">X</span> <span class="n">X</span> <span class="n">X</span> <span class="n">X</span> <span class="n">X</span> <span class="n">X</span> <span class="n">_</span> <span class="n">X</span> <span class="n">X</span> <span class="n">X</span> <span class="p">,</span>
</span><span class='line'><span class="n">s</span> <span class="n">_</span> <span class="n">_</span> <span class="n">X</span> <span class="n">X</span> <span class="n">X</span> <span class="n">_</span> <span class="n">_</span> <span class="n">_</span> <span class="n">_</span> <span class="n">_</span> <span class="n">X</span> <span class="n">X</span> <span class="n">X</span> <span class="n">_</span> <span class="n">X</span> <span class="n">X</span> <span class="p">,</span>
</span><span class='line'><span class="n">s</span> <span class="n">_</span> <span class="n">X</span> <span class="n">X</span> <span class="n">_</span> <span class="n">_</span> <span class="n">_</span> <span class="n">_</span> <span class="n">_</span> <span class="n">_</span> <span class="n">_</span> <span class="n">_</span> <span class="n">_</span> <span class="n">X</span> <span class="n">X</span> <span class="n">_</span> <span class="n">_</span> <span class="p">,</span>
</span><span class='line'><span class="n">s</span> <span class="n">_</span> <span class="n">X</span> <span class="n">X</span> <span class="n">_</span> <span class="n">_</span> <span class="n">_</span> <span class="n">_</span> <span class="n">_</span> <span class="n">_</span> <span class="n">_</span> <span class="n">_</span> <span class="n">_</span> <span class="n">X</span> <span class="n">X</span> <span class="n">_</span> <span class="n">_</span> <span class="p">,</span>
</span><span class='line'><span class="n">s</span> <span class="n">X</span> <span class="n">X</span> <span class="n">_</span> <span class="n">_</span> <span class="n">_</span> <span class="n">_</span> <span class="n">_</span> <span class="n">_</span> <span class="n">_</span> <span class="n">_</span> <span class="n">_</span> <span class="n">_</span> <span class="n">_</span> <span class="n">X</span> <span class="n">X</span> <span class="n">_</span> <span class="p">,</span>
</span><span class='line'><span class="n">s</span> <span class="n">X</span> <span class="n">X</span> <span class="n">_</span> <span class="n">_</span> <span class="n">_</span> <span class="n">_</span> <span class="n">_</span> <span class="n">_</span> <span class="n">_</span> <span class="n">_</span> <span class="n">_</span> <span class="n">_</span> <span class="n">_</span> <span class="n">X</span> <span class="n">X</span> <span class="n">_</span> <span class="p">,</span>
</span><span class='line'><span class="n">s</span> <span class="n">X</span> <span class="n">X</span> <span class="n">_</span> <span class="n">X</span> <span class="n">X</span> <span class="n">X</span> <span class="n">X</span> <span class="n">X</span> <span class="n">_</span> <span class="n">_</span> <span class="n">_</span> <span class="n">_</span> <span class="n">_</span> <span class="n">X</span> <span class="n">X</span> <span class="n">_</span> <span class="p">,</span>
</span><span class='line'><span class="n">s</span> <span class="n">X</span> <span class="n">X</span> <span class="n">_</span> <span class="n">_</span> <span class="n">_</span> <span class="n">_</span> <span class="n">_</span> <span class="n">X</span> <span class="n">_</span> <span class="n">_</span> <span class="n">_</span> <span class="n">_</span> <span class="n">_</span> <span class="n">X</span> <span class="n">X</span> <span class="n">_</span> <span class="p">,</span>
</span><span class='line'><span class="n">s</span> <span class="n">X</span> <span class="n">X</span> <span class="n">_</span> <span class="n">_</span> <span class="n">_</span> <span class="n">_</span> <span class="n">_</span> <span class="n">X</span> <span class="n">_</span> <span class="n">_</span> <span class="n">_</span> <span class="n">_</span> <span class="n">_</span> <span class="n">X</span> <span class="n">X</span> <span class="n">_</span> <span class="p">,</span>
</span><span class='line'><span class="n">s</span> <span class="n">_</span> <span class="n">X</span> <span class="n">X</span> <span class="n">_</span> <span class="n">_</span> <span class="n">_</span> <span class="n">_</span> <span class="n">X</span> <span class="n">_</span> <span class="n">_</span> <span class="n">_</span> <span class="n">_</span> <span class="n">X</span> <span class="n">X</span> <span class="n">_</span> <span class="n">_</span> <span class="p">,</span>
</span><span class='line'><span class="n">s</span> <span class="n">_</span> <span class="n">X</span> <span class="n">X</span> <span class="n">_</span> <span class="n">_</span> <span class="n">_</span> <span class="n">_</span> <span class="n">X</span> <span class="n">_</span> <span class="n">_</span> <span class="n">_</span> <span class="n">_</span> <span class="n">X</span> <span class="n">X</span> <span class="n">_</span> <span class="n">_</span> <span class="p">,</span>
</span><span class='line'><span class="n">s</span> <span class="n">_</span> <span class="n">_</span> <span class="n">X</span> <span class="n">X</span> <span class="n">X</span> <span class="n">_</span> <span class="n">_</span> <span class="n">_</span> <span class="n">_</span> <span class="n">_</span> <span class="n">X</span> <span class="n">X</span> <span class="n">X</span> <span class="n">_</span> <span class="n">_</span> <span class="n">_</span> <span class="p">,</span>
</span><span class='line'><span class="n">s</span> <span class="n">_</span> <span class="n">_</span> <span class="n">_</span> <span class="n">X</span> <span class="n">X</span> <span class="n">X</span> <span class="n">X</span> <span class="n">X</span> <span class="n">X</span> <span class="n">X</span> <span class="n">X</span> <span class="n">X</span> <span class="n">_</span> <span class="n">_</span> <span class="n">_</span> <span class="n">_</span> <span class="p">,</span>
</span><span class='line'><span class="n">s</span> <span class="n">_</span> <span class="n">_</span> <span class="n">_</span> <span class="n">_</span> <span class="n">_</span> <span class="n">X</span> <span class="n">X</span> <span class="n">X</span> <span class="n">X</span> <span class="n">X</span> <span class="n">_</span> <span class="n">_</span> <span class="n">_</span> <span class="n">_</span> <span class="n">_</span> <span class="n">_</span> <span class="p">,</span>
</span><span class='line'><span class="n">s</span> <span class="n">_</span> <span class="n">_</span> <span class="n">_</span> <span class="n">_</span> <span class="n">_</span> <span class="n">_</span> <span class="n">_</span> <span class="n">_</span> <span class="n">_</span> <span class="n">_</span> <span class="n">_</span> <span class="n">_</span> <span class="n">_</span> <span class="n">_</span> <span class="n">_</span> <span class="n">_</span> <span class="p">,</span>
</span><span class='line'><span class="p">};</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<h3 id="section-6">8.3 类型提升</h3>
<p>类型提升就是在表达式中将变量类型按照规则提升为其他类型.
<code>printf("%d", sizeof 'a')</code>的结果为4,而不是1.</p>

<p>ANSI C:当编译器能保证不提升也能得到相同的结果时,可以不提升.</p>

<pre><code>        Type Promotions in C    
Original Type                   Usually Promoted To
char                            int
bit-field                       int
enum                            int
unsigned char                   int
short                           int
unsigned short                  int
float                           double
array of anything               pointer to anything
</code></pre>

<h3 id="section-7">8.4 函数原型</h3>

<p>函数参数也属于表达式,默认也会类型提升.
如果使用了函数原型,缺省参数提升就不会发生.</p>

<h3 id="section-8">8.6 不按回车获得字符</h3>

<p>这里只列出一个方案,其他的可以参考[这里][http://stackoverflow.com/questions/421860/c-c-capture-characters-from-standard-input-without-waiting-for-enter-to-be-pr].</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
</pre></td><td class='code'><pre><code class='cpp'><span class='line'><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="err">#</span><span class="n">include</span> <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="n">stdlib</span><span class="p">.</span><span class="n">h</span><span class="o">&amp;</span><span class="n">gt</span><span class="p">;</span>
</span><span class='line'><span class="cp">#include &amp;lt;sys/ioctl.h&amp;gt;</span>
</span><span class='line'><span class="cp">#include &amp;lt;curses.h&amp;gt;</span>
</span><span class='line'>
</span><span class='line'><span class="kt">int</span> <span class="n">kbhit</span><span class="p">()</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="kt">int</span> <span class="n">i</span><span class="p">;</span>
</span><span class='line'>    <span class="n">ioctl</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="n">FIONREAD</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span><span class="n">i</span><span class="p">);</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">i</span><span class="p">;</span> <span class="cm">/* return a count of chars available to read */</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="cm">/* uses curses library, and the kbhit() function defined above</span>
</span><span class='line'><span class="cm">*/</span>
</span><span class='line'><span class="kt">int</span> <span class="n">main</span><span class="p">()</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="kt">int</span> <span class="n">c</span><span class="o">=</span><span class="sc">&#39; &#39;</span><span class="p">,</span> <span class="n">i</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span>
</span><span class='line'>    <span class="n">initscr</span><span class="p">();</span> <span class="cm">/* initialize curses functions */</span>
</span><span class='line'>    <span class="n">cbreak</span><span class="p">();</span>
</span><span class='line'>    <span class="n">noecho</span><span class="p">();</span> <span class="cm">/* do not echo pressed character */</span>
</span><span class='line'>    <span class="n">mvprintw</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="s">&quot;Press &#39;q&#39; to quit</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">);</span>
</span><span class='line'>    <span class="n">refresh</span><span class="p">();</span>
</span><span class='line'>    <span class="k">while</span> <span class="p">(</span><span class="n">c</span><span class="o">!=</span><span class="sc">&#39;q&#39;</span><span class="p">)</span>
</span><span class='line'>        <span class="k">if</span> <span class="p">(</span><span class="n">kbhit</span><span class="p">())</span> <span class="p">{</span>
</span><span class='line'>            <span class="n">c</span> <span class="o">=</span> <span class="n">getch</span><span class="p">();</span> <span class="cm">/* won&#39;t block, as we know a character is</span>
</span><span class='line'><span class="cm">                            waiting */</span>
</span><span class='line'>            <span class="n">mvprintw</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="s">&quot;got char &#39;%c&#39; on iteration %d </span><span class="se">\n</span><span class="s">&quot;</span><span class="p">,</span><span class="n">c</span><span class="p">,</span> <span class="o">++</span><span class="n">i</span><span class="p">);</span>
</span><span class='line'>            <span class="n">refresh</span><span class="p">();</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="n">nocbreak</span><span class="p">();</span>
</span><span class='line'>    <span class="n">echo</span><span class="p">();</span>
</span><span class='line'>    <span class="n">endwin</span><span class="p">();</span> <span class="cm">/* finish curses */</span>
</span><span class='line'>    <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<h3 id="section-9">8.7</h3>

<p>函数指针数组:</p>

<pre><code>extern int a(), b();
int (*state[])() = {a, b};
state[0]();
(*state[1])();
</code></pre>

<h3 id="section-10">8.9 强制类型转换</h3>

<p>强制类型转换(cast)有两个作用,”类型转换”和”消除类型歧义”.</p>

<h2 id="chapter-9">Chapter 9</h2>

<p><img src="/uploads/array_pointer.png" alt="Array" /></p>

<p>什么时候数组和指针是相同的:</p>

<ol>
  <li>表达式中数组名(与声明不同)被当做一个指向该数组第一个元素的指针.</li>
  <li>下标总是与指针的偏移量相同.</li>
  <li>在函数参数的声明中,数组名被编译器当做指向该数组第一个元素的指针.</li>
</ol>

<p>对数组的引用,如<code>a[i]</code>在编译时总是被编译器处理成<code>*(a+i)</code>的形式.<code>a[6]</code>和<code>6[a]</code>都是正确的.</p>

<p>总结:</p>

<p>Caution: don’t read this unless you’ve read and understood the preceding chapter, or it may cause
permanent brain-fade.
1. An array access <code>a[i]</code> is always “rewritten” or interpreted by the compiler as a pointer access <code>*(a+i)</code>;
2. Pointers are always just pointers; they are never rewritten to arrays. You can apply a subscript to a pointer; you typically do this when the pointer is a function argument, and you know that you will be passing an array in.
3. An array declaration in the specific context (only) of a function parameter can equally be written as a pointer. An array that is a function argument (i.e., in a call to the function) is always changed, by the compiler, to a pointer to the start of the array.
4. Therefore, you have the choice for defining a function parameter which is an array, either as an array or as a pointer. Whichever way you define it, you actually get a pointer inside the function.
5. In all other cases, definitions should match declarations. If you defined it as an array, your extern declaration should be an array. And likewise for a pointer.</p>

<h3 id="section-11">9.6 多维数组</h3>

<p>C语言的多维数组其实是数组的数组.<code>pea[i][j]</code>被编译器解析为<code>*(*(pea+i)+j)</code>.</p>

<p>初始化多维数组时,可以在最后一个初始化值后面加一个逗号,也可以省略.同时也可以省略最左边下标的长度(也只能时最左边的下标).</p>

<h4 id="section-12">分解多维数组</h4>

<pre><code>int apricot[2][3][4];
/*兼容类型*/
int (*p)[3][4] = apricot;
int (*r)[5] = apricot[i];
int *t = apricot[i][j];
int u = apricot[i][j][k];
</code></pre>

<h2 id="chapter-10">Chapter 10</h2>

<h3 id="section-13">10.2</h3>

<p>指针数组(<code>char *p[4]</code>)被称作Iliffe向量.</p>

<p>函数参数中”数组名被改写为一个指针参数”规则并不是递归定义的.数组的数组会被改写为”数组的指针”,而不是”指针的指针”.</p>

<pre><code>        实参                         形参
数组的数组 char c[9][9];        char(*)[10]; 数组指针
指针数组   char *c[9];          char **c;    指针的指针
数组指针   char (*c)[9];        char(*c)[9]; 不改变
指针的指针 char **c;            char **c;    不改变
</code></pre>

]]></content>
  </entry>
  
</feed>
